# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI/main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets



class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(820,915)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("UI\\icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setLayoutDirection(QtCore.Qt.LeftToRight)
        MainWindow.setAnimated(True)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, -1, 811, 861))
        self.stackedWidget.setObjectName("stackedWidget")
        self.empty_page = QtWidgets.QWidget()
        self.empty_page.setObjectName("empty_page")
        self.stackedWidget.addWidget(self.empty_page)
        self.satellite_page = QtWidgets.QWidget()
        self.satellite_page.setObjectName("satellite_page")
        self.groupBox_9 = QtWidgets.QGroupBox(self.satellite_page)
        self.groupBox_9.setGeometry(QtCore.QRect(10, 10, 801, 851))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_9.setFont(font)
        self.groupBox_9.setAutoFillBackground(False)
        self.groupBox_9.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox_9.setObjectName("groupBox_9")
        self.label_31 = QtWidgets.QLabel(self.groupBox_9)
        self.label_31.setGeometry(QtCore.QRect(20, 38, 55, 16))
        self.label_31.setObjectName("label_31")
        self.label_54 = QtWidgets.QLabel(self.groupBox_9)
        self.label_54.setGeometry(QtCore.QRect(20, 80, 161, 21))
        self.label_54.setObjectName("label_54")
        self.name_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.name_sat.setGeometry(QtCore.QRect(100, 38, 511, 22))
        self.name_sat.setObjectName("name_sat")
        self.long_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.long_sat.setGeometry(QtCore.QRect(200, 80, 101, 22))
        self.long_sat.setObjectName("long_sat")
        self.save_sat = QtWidgets.QPushButton(self.groupBox_9)
        self.save_sat.setGeometry(QtCore.QRect(680, 810, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_sat.setFont(font)
        self.save_sat.setObjectName("save_sat")
        self.load_sat = QtWidgets.QPushButton(self.groupBox_9)
        self.load_sat.setGeometry(QtCore.QRect(550, 810, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_sat.setFont(font)
        self.load_sat.setObjectName("load_sat")
        self.default_sat = QtWidgets.QComboBox(self.groupBox_9)
        self.default_sat.setGeometry(QtCore.QRect(650, 70, 131, 22))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.default_sat.setFont(font)
        self.default_sat.setObjectName("default_sat")
        self.default_sat.addItem("")
        self.default_sat.setItemText(0, "")
        self.default_sat.addItem("")
        self.default_sat.addItem("")
        self.default_sat.addItem("")
        self.default_sat.addItem("")
        self.label_55 = QtWidgets.QLabel(self.groupBox_9)
        self.label_55.setGeometry(QtCore.QRect(650, 40, 131, 16))
        self.label_55.setObjectName("label_55")
        self.label_56 = QtWidgets.QLabel(self.groupBox_9)
        self.label_56.setGeometry(QtCore.QRect(330, 78, 111, 16))
        self.label_56.setObjectName("label_56")
        self.height_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.height_sat.setGeometry(QtCore.QRect(510, 78, 101, 22))
        self.height_sat.setObjectName("height_sat")
        self.label_59 = QtWidgets.QLabel(self.groupBox_9)
        self.label_59.setGeometry(QtCore.QRect(330, 119, 121, 16))
        self.label_59.setObjectName("label_59")
        self.eirp_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.eirp_sat.setGeometry(QtCore.QRect(510, 115, 101, 22))
        self.eirp_sat.setObjectName("eirp_sat")
        self.label_60 = QtWidgets.QLabel(self.groupBox_9)
        self.label_60.setGeometry(QtCore.QRect(20, 148, 171, 51))
        self.label_60.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_60.setObjectName("label_60")
        self.max_bw_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.max_bw_sat.setGeometry(QtCore.QRect(200, 158, 101, 22))
        self.max_bw_sat.setObjectName("max_bw_sat")
        self.label_61 = QtWidgets.QLabel(self.groupBox_9)
        self.label_61.setGeometry(QtCore.QRect(330, 143, 171, 51))
        self.label_61.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_61.setObjectName("label_61")
        self.bw_util_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.bw_util_sat.setGeometry(QtCore.QRect(510, 156, 101, 22))
        self.bw_util_sat.setObjectName("bw_util_sat")
        self.label_64 = QtWidgets.QLabel(self.groupBox_9)
        self.label_64.setGeometry(QtCore.QRect(20, 203, 61, 16))
        self.label_64.setObjectName("label_64")
        self.rolloff_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.rolloff_sat.setGeometry(QtCore.QRect(200, 203, 101, 22))
        self.rolloff_sat.setObjectName("rolloff_sat")
        self.label_65 = QtWidgets.QLabel(self.groupBox_9)
        self.label_65.setGeometry(QtCore.QRect(330, 203, 91, 16))
        self.label_65.setObjectName("label_65")
        self.modcod_sat = QtWidgets.QComboBox(self.groupBox_9)
        self.modcod_sat.setGeometry(QtCore.QRect(450, 203, 161, 22))
        self.modcod_sat.setObjectName("modcod_sat")
        self.modcod_sat.addItem("")
        self.modcod_sat.addItem("")
        self.modcod_sat.addItem("")
        self.label_66 = QtWidgets.QLabel(self.groupBox_9)
        self.label_66.setGeometry(QtCore.QRect(20, 120, 131, 20))
        self.label_66.setObjectName("label_66")
        self.freq_sat = QtWidgets.QLineEdit(self.groupBox_9)
        self.freq_sat.setGeometry(QtCore.QRect(200, 120, 101, 22))
        self.freq_sat.setObjectName("freq_sat")
        self.label_7 = QtWidgets.QLabel(self.groupBox_9)
        self.label_7.setGeometry(QtCore.QRect(673, 100, 91, 20))
        self.label_7.setObjectName("label_7")
        self.pol_sat = QtWidgets.QComboBox(self.groupBox_9)
        self.pol_sat.setGeometry(QtCore.QRect(667, 130, 101, 22))
        self.pol_sat.setObjectName("pol_sat")
        self.pol_sat.addItem("")
        self.pol_sat.addItem("")
        self.pol_sat.addItem("")
        self.clear_sat = QtWidgets.QPushButton(self.groupBox_9)
        self.clear_sat.setGeometry(QtCore.QRect(420, 810, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_sat.setFont(font)
        self.clear_sat.setObjectName("clear_sat")
        self.stackedWidget.addWidget(self.satellite_page)
        self.ground_station_page = QtWidgets.QWidget()
        self.ground_station_page.setObjectName("ground_station_page")
        self.groupBox = QtWidgets.QGroupBox(self.ground_station_page)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 801, 851))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox.setFont(font)
        self.groupBox.setAutoFillBackground(False)
        self.groupBox.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(20, 36, 55, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(20, 66, 151, 31))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(20, 111, 161, 21))
        self.label_3.setObjectName("label_3")
        self.name_ground_station_grstat = QtWidgets.QLineEdit(self.groupBox)
        self.name_ground_station_grstat.setGeometry(QtCore.QRect(100, 36, 271, 22))
        self.name_ground_station_grstat.setObjectName("name_ground_station_grstat")
        self.long_ground_station_grstat = QtWidgets.QLineEdit(self.groupBox)
        self.long_ground_station_grstat.setGeometry(QtCore.QRect(200, 111, 101, 22))
        self.long_ground_station_grstat.setObjectName("long_ground_station_grstat")
        self.lat_ground_station_grstat = QtWidgets.QLineEdit(self.groupBox)
        self.lat_ground_station_grstat.setGeometry(QtCore.QRect(200, 76, 101, 22))
        self.lat_ground_station_grstat.setObjectName("lat_ground_station_grstat")
        self.save_ground_station_gdstation = QtWidgets.QPushButton(self.groupBox)
        self.save_ground_station_gdstation.setGeometry(QtCore.QRect(700, 810, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_ground_station_gdstation.setFont(font)
        self.save_ground_station_gdstation.setObjectName("save_ground_station_gdstation")
        self.load_ground_station_gdstation = QtWidgets.QPushButton(self.groupBox)
        self.load_ground_station_gdstation.setGeometry(QtCore.QRect(591, 811, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_ground_station_gdstation.setFont(font)
        self.load_ground_station_gdstation.setObjectName("load_ground_station_gdstation")
        self.clear_ground_station_gdstation = QtWidgets.QPushButton(self.groupBox)
        self.clear_ground_station_gdstation.setGeometry(QtCore.QRect(481, 811, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_ground_station_gdstation.setFont(font)
        self.clear_ground_station_gdstation.setObjectName("clear_ground_station_gdstation")
        self.stackedWidget.addWidget(self.ground_station_page)
        self.reception_page = QtWidgets.QWidget()
        self.reception_page.setObjectName("reception_page")
        self.groupBox_3 = QtWidgets.QGroupBox(self.reception_page)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 10, 801, 851))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setAutoFillBackground(False)
        self.groupBox_3.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox_3.setObjectName("groupBox_3")
        self.label_19 = QtWidgets.QLabel(self.groupBox_3)
        self.label_19.setGeometry(QtCore.QRect(20, 38, 55, 16))
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.groupBox_3)
        self.label_20.setGeometry(QtCore.QRect(20, 68, 151, 31))
        self.label_20.setObjectName("label_20")
        self.label_21 = QtWidgets.QLabel(self.groupBox_3)
        self.label_21.setGeometry(QtCore.QRect(20, 113, 161, 21))
        self.label_21.setObjectName("label_21")
        self.name_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.name_reception_rcp.setGeometry(QtCore.QRect(100, 38, 511, 22))
        self.name_reception_rcp.setObjectName("name_reception_rcp")
        self.lnb_gain_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.lnb_gain_reception_rcp.setGeometry(QtCore.QRect(200, 113, 101, 22))
        self.lnb_gain_reception_rcp.setObjectName("lnb_gain_reception_rcp")
        self.ant_size_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.ant_size_reception_rcp.setGeometry(QtCore.QRect(200, 74, 101, 22))
        self.ant_size_reception_rcp.setObjectName("ant_size_reception_rcp")
        self.save_reception_rcp = QtWidgets.QPushButton(self.groupBox_3)
        self.save_reception_rcp.setGeometry(QtCore.QRect(700, 810, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_reception_rcp.setFont(font)
        self.save_reception_rcp.setObjectName("save_reception_rcp")
        self.load_reception_rcp = QtWidgets.QPushButton(self.groupBox_3)
        self.load_reception_rcp.setGeometry(QtCore.QRect(591, 811, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_reception_rcp.setFont(font)
        self.load_reception_rcp.setObjectName("load_reception_rcp")
        self.label_23 = QtWidgets.QLabel(self.groupBox_3)
        self.label_23.setGeometry(QtCore.QRect(330, 80, 171, 16))
        self.label_23.setObjectName("label_23")
        self.ant_eff_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.ant_eff_reception_rcp.setGeometry(QtCore.QRect(510, 78, 101, 22))
        self.ant_eff_reception_rcp.setObjectName("ant_eff_reception_rcp")
        self.label_24 = QtWidgets.QLabel(self.groupBox_3)
        self.label_24.setGeometry(QtCore.QRect(330, 119, 161, 16))
        self.label_24.setObjectName("label_24")
        self.lnb_temp_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.lnb_temp_reception_rcp.setGeometry(QtCore.QRect(510, 115, 101, 22))
        self.lnb_temp_reception_rcp.setObjectName("lnb_temp_reception_rcp")
        self.label_25 = QtWidgets.QLabel(self.groupBox_3)
        self.label_25.setGeometry(QtCore.QRect(20, 138, 171, 51))
        self.label_25.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_25.setObjectName("label_25")
        self.coupling_loss_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.coupling_loss_reception_rcp.setGeometry(QtCore.QRect(200, 153, 101, 22))
        self.coupling_loss_reception_rcp.setObjectName("coupling_loss_reception_rcp")
        self.label_26 = QtWidgets.QLabel(self.groupBox_3)
        self.label_26.setGeometry(QtCore.QRect(20, 187, 171, 51))
        self.label_26.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_26.setObjectName("label_26")
        self.max_depoint_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.max_depoint_reception_rcp.setGeometry(QtCore.QRect(200, 200, 101, 22))
        self.max_depoint_reception_rcp.setObjectName("max_depoint_reception_rcp")
        self.label_8 = QtWidgets.QLabel(self.groupBox_3)
        self.label_8.setGeometry(QtCore.QRect(665, 40, 91, 20))
        self.label_8.setObjectName("label_8")
        self.pol_reception_rcp = QtWidgets.QComboBox(self.groupBox_3)
        self.pol_reception_rcp.setGeometry(QtCore.QRect(660, 70, 101, 22))
        self.pol_reception_rcp.setObjectName("pol_reception_rcp")
        self.pol_reception_rcp.addItem("")
        self.pol_reception_rcp.addItem("")
        self.pol_reception_rcp.addItem("")
        self.clear_reception_rcp = QtWidgets.QPushButton(self.groupBox_3)
        self.clear_reception_rcp.setGeometry(QtCore.QRect(481, 811, 93, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_reception_rcp.setFont(font)
        self.clear_reception_rcp.setObjectName("clear_reception_rcp")
        self.label_62 = QtWidgets.QLabel(self.groupBox_3)
        self.label_62.setGeometry(QtCore.QRect(330, 140, 171, 51))
        self.label_62.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_62.setObjectName("label_62")
        self.cable_loss_reception_rcp = QtWidgets.QLineEdit(self.groupBox_3)
        self.cable_loss_reception_rcp.setGeometry(QtCore.QRect(510, 155, 101, 22))
        self.cable_loss_reception_rcp.setObjectName("cable_loss_reception_rcp")
        self.stackedWidget.addWidget(self.reception_page)
        self.single_point_atm_calc_page = QtWidgets.QWidget()
        self.single_point_atm_calc_page.setObjectName("single_point_atm_calc_page")
        self.groupBox_7 = QtWidgets.QGroupBox(self.single_point_atm_calc_page)
        self.groupBox_7.setGeometry(QtCore.QRect(20, 20, 781, 131))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_7.setFont(font)
        self.groupBox_7.setObjectName("groupBox_7")
        self.lat_ground_station_spatm = QtWidgets.QLineEdit(self.groupBox_7)
        self.lat_ground_station_spatm.setGeometry(QtCore.QRect(200, 30, 101, 22))
        self.lat_ground_station_spatm.setObjectName("lat_ground_station_spatm")
        self.long_ground_station_spatm = QtWidgets.QLineEdit(self.groupBox_7)
        self.long_ground_station_spatm.setGeometry(QtCore.QRect(500, 30, 101, 22))
        self.long_ground_station_spatm.setObjectName("long_ground_station_spatm")
        self.label_51 = QtWidgets.QLabel(self.groupBox_7)
        self.label_51.setGeometry(QtCore.QRect(20, 23, 151, 31))
        self.label_51.setObjectName("label_51")
        self.label_50 = QtWidgets.QLabel(self.groupBox_7)
        self.label_50.setGeometry(QtCore.QRect(319, 28, 161, 21))
        self.label_50.setObjectName("label_50")
        self.label_53 = QtWidgets.QLabel(self.groupBox_7)
        self.label_53.setGeometry(QtCore.QRect(20, 60, 161, 21))
        self.label_53.setObjectName("label_53")
        self.ant_size_reception_spatm = QtWidgets.QLineEdit(self.groupBox_7)
        self.ant_size_reception_spatm.setGeometry(QtCore.QRect(200, 60, 101, 22))
        self.ant_size_reception_spatm.setObjectName("ant_size_reception_spatm")
        self.ant_eff_reception_spatm = QtWidgets.QLineEdit(self.groupBox_7)
        self.ant_eff_reception_spatm.setGeometry(QtCore.QRect(500, 60, 101, 22))
        self.ant_eff_reception_spatm.setObjectName("ant_eff_reception_spatm")
        self.label_68 = QtWidgets.QLabel(self.groupBox_7)
        self.label_68.setGeometry(QtCore.QRect(320, 60, 141, 16))
        self.label_68.setObjectName("label_68")
        self.calc_spatm = QtWidgets.QPushButton(self.single_point_atm_calc_page)
        self.calc_spatm.setGeometry(QtCore.QRect(666, 830, 141, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.calc_spatm.setFont(font)
        self.calc_spatm.setObjectName("calc_spatm")
        self.textEdit_2 = QtWidgets.QTextEdit(self.single_point_atm_calc_page)
        self.textEdit_2.setGeometry(QtCore.QRect(6, 650, 801, 171))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.textEdit_2.setFont(font)
        self.textEdit_2.setObjectName("textEdit_2")
        self.groupBox_8 = QtWidgets.QGroupBox(self.single_point_atm_calc_page)
        self.groupBox_8.setGeometry(QtCore.QRect(20, 150, 781, 131))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_8.setFont(font)
        self.groupBox_8.setObjectName("groupBox_8")
        self.label_52 = QtWidgets.QLabel(self.groupBox_8)
        self.label_52.setGeometry(QtCore.QRect(20, 60, 131, 16))
        self.label_52.setObjectName("label_52")
        self.label_57 = QtWidgets.QLabel(self.groupBox_8)
        self.label_57.setGeometry(QtCore.QRect(20, 30, 161, 21))
        self.label_57.setObjectName("label_57")
        self.long_sat_spatm = QtWidgets.QLineEdit(self.groupBox_8)
        self.long_sat_spatm.setGeometry(QtCore.QRect(200, 30, 101, 22))
        self.long_sat_spatm.setObjectName("long_sat_spatm")
        self.freq_sat_spatm = QtWidgets.QLineEdit(self.groupBox_8)
        self.freq_sat_spatm.setGeometry(QtCore.QRect(200, 60, 101, 22))
        self.freq_sat_spatm.setObjectName("freq_sat_spatm")
        self.default_sat_sp_perf_3 = QtWidgets.QComboBox(self.groupBox_8)
        self.default_sat_sp_perf_3.setGeometry(QtCore.QRect(634, 44, 131, 22))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.default_sat_sp_perf_3.setFont(font)
        self.default_sat_sp_perf_3.setObjectName("default_sat_sp_perf_3")
        self.default_sat_sp_perf_3.addItem("")
        self.default_sat_sp_perf_3.addItem("")
        self.default_sat_sp_perf_3.addItem("")
        self.default_sat_sp_perf_3.addItem("")
        self.label_63 = QtWidgets.QLabel(self.groupBox_8)
        self.label_63.setGeometry(QtCore.QRect(636, 14, 131, 16))
        self.label_63.setObjectName("label_63")
        self.p_year_spatm = QtWidgets.QLineEdit(self.single_point_atm_calc_page)
        self.p_year_spatm.setGeometry(QtCore.QRect(550, 834, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.p_year_spatm.setFont(font)
        self.p_year_spatm.setToolTip("")
        self.p_year_spatm.setObjectName("p_year_spatm")
        self.label_58 = QtWidgets.QLabel(self.single_point_atm_calc_page)
        self.label_58.setGeometry(QtCore.QRect(340, 834, 201, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_58.setFont(font)
        self.label_58.setObjectName("label_58")
        self.label_9 = QtWidgets.QLabel(self.single_point_atm_calc_page)
        self.label_9.setGeometry(QtCore.QRect(10, 839, 71, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.method_spatm = QtWidgets.QComboBox(self.single_point_atm_calc_page)
        self.method_spatm.setGeometry(QtCore.QRect(84, 837, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.method_spatm.setFont(font)
        self.method_spatm.setObjectName("method_spatm")
        self.method_spatm.addItem("")
        self.method_spatm.addItem("")
        self.stackedWidget.addWidget(self.single_point_atm_calc_page)
        self.single_point_perf_calc_page = QtWidgets.QWidget()
        self.single_point_perf_calc_page.setObjectName("single_point_perf_calc_page")
        self.groupBox_4 = QtWidgets.QGroupBox(self.single_point_perf_calc_page)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 10, 801, 121))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_4.setFont(font)
        self.groupBox_4.setAutoFillBackground(False)
        self.groupBox_4.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox_4.setObjectName("groupBox_4")
        self.label_27 = QtWidgets.QLabel(self.groupBox_4)
        self.label_27.setGeometry(QtCore.QRect(20, 36, 55, 16))
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.groupBox_4)
        self.label_28.setGeometry(QtCore.QRect(20, 66, 151, 31))
        self.label_28.setObjectName("label_28")
        self.label_29 = QtWidgets.QLabel(self.groupBox_4)
        self.label_29.setGeometry(QtCore.QRect(330, 78, 161, 21))
        self.label_29.setObjectName("label_29")
        self.name_ground_station_sp_perf = QtWidgets.QLineEdit(self.groupBox_4)
        self.name_ground_station_sp_perf.setGeometry(QtCore.QRect(100, 36, 511, 22))
        self.name_ground_station_sp_perf.setObjectName("name_ground_station_sp_perf")
        self.long_ground_station_sp_perf = QtWidgets.QLineEdit(self.groupBox_4)
        self.long_ground_station_sp_perf.setGeometry(QtCore.QRect(510, 80, 101, 22))
        self.long_ground_station_sp_perf.setObjectName("long_ground_station_sp_perf")
        self.lat_ground_station_sp_perf = QtWidgets.QLineEdit(self.groupBox_4)
        self.lat_ground_station_sp_perf.setGeometry(QtCore.QRect(200, 76, 101, 22))
        self.lat_ground_station_sp_perf.setObjectName("lat_ground_station_sp_perf")
        self.save_ground_station_sp_perf = QtWidgets.QPushButton(self.groupBox_4)
        self.save_ground_station_sp_perf.setGeometry(QtCore.QRect(652, 80, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_ground_station_sp_perf.setFont(font)
        self.save_ground_station_sp_perf.setObjectName("save_ground_station_sp_perf")
        self.load_ground_station_sp_perf = QtWidgets.QPushButton(self.groupBox_4)
        self.load_ground_station_sp_perf.setGeometry(QtCore.QRect(652, 48, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_ground_station_sp_perf.setFont(font)
        self.load_ground_station_sp_perf.setObjectName("load_ground_station_sp_perf")
        self.clear_ground_station_sp_perf = QtWidgets.QPushButton(self.groupBox_4)
        self.clear_ground_station_sp_perf.setGeometry(QtCore.QRect(652, 16, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_ground_station_sp_perf.setFont(font)
        self.clear_ground_station_sp_perf.setObjectName("clear_ground_station_sp_perf")
        self.groupBox_5 = QtWidgets.QGroupBox(self.single_point_perf_calc_page)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 129, 801, 271))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_5.setFont(font)
        self.groupBox_5.setAutoFillBackground(False)
        self.groupBox_5.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox_5.setObjectName("groupBox_5")
        self.label_30 = QtWidgets.QLabel(self.groupBox_5)
        self.label_30.setGeometry(QtCore.QRect(20, 29, 55, 16))
        self.label_30.setObjectName("label_30")
        self.label_32 = QtWidgets.QLabel(self.groupBox_5)
        self.label_32.setGeometry(QtCore.QRect(20, 71, 161, 21))
        self.label_32.setObjectName("label_32")
        self.name_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.name_sat_sp_perf.setGeometry(QtCore.QRect(100, 29, 511, 22))
        self.name_sat_sp_perf.setObjectName("name_sat_sp_perf")
        self.long_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.long_sat_sp_perf.setGeometry(QtCore.QRect(200, 71, 101, 22))
        self.long_sat_sp_perf.setObjectName("long_sat_sp_perf")
        self.save_sat_sp_perf = QtWidgets.QPushButton(self.groupBox_5)
        self.save_sat_sp_perf.setGeometry(QtCore.QRect(653, 231, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_sat_sp_perf.setFont(font)
        self.save_sat_sp_perf.setObjectName("save_sat_sp_perf")
        self.load_sat_sp_perf = QtWidgets.QPushButton(self.groupBox_5)
        self.load_sat_sp_perf.setGeometry(QtCore.QRect(653, 199, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_sat_sp_perf.setFont(font)
        self.load_sat_sp_perf.setObjectName("load_sat_sp_perf")
        self.default_sat_sp_perf = QtWidgets.QComboBox(self.groupBox_5)
        self.default_sat_sp_perf.setGeometry(QtCore.QRect(650, 61, 131, 22))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.default_sat_sp_perf.setFont(font)
        self.default_sat_sp_perf.setObjectName("default_sat_sp_perf")
        self.default_sat_sp_perf.addItem("")
        self.default_sat_sp_perf.addItem("")
        self.default_sat_sp_perf.addItem("")
        self.default_sat_sp_perf.addItem("")
        self.label_33 = QtWidgets.QLabel(self.groupBox_5)
        self.label_33.setGeometry(QtCore.QRect(648, 31, 131, 16))
        self.label_33.setObjectName("label_33")
        self.label_34 = QtWidgets.QLabel(self.groupBox_5)
        self.label_34.setGeometry(QtCore.QRect(330, 69, 111, 16))
        self.label_34.setObjectName("label_34")
        self.height_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.height_sat_sp_perf.setGeometry(QtCore.QRect(510, 69, 101, 22))
        self.height_sat_sp_perf.setObjectName("height_sat_sp_perf")
        self.label_35 = QtWidgets.QLabel(self.groupBox_5)
        self.label_35.setGeometry(QtCore.QRect(330, 110, 121, 16))
        self.label_35.setObjectName("label_35")
        self.eirp_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.eirp_sat_sp_perf.setGeometry(QtCore.QRect(510, 106, 101, 22))
        self.eirp_sat_sp_perf.setObjectName("eirp_sat_sp_perf")
        self.label_36 = QtWidgets.QLabel(self.groupBox_5)
        self.label_36.setGeometry(QtCore.QRect(20, 139, 171, 51))
        self.label_36.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_36.setObjectName("label_36")
        self.max_bw_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.max_bw_sat_sp_perf.setGeometry(QtCore.QRect(200, 149, 101, 22))
        self.max_bw_sat_sp_perf.setObjectName("max_bw_sat_sp_perf")
        self.label_37 = QtWidgets.QLabel(self.groupBox_5)
        self.label_37.setGeometry(QtCore.QRect(330, 134, 171, 51))
        self.label_37.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_37.setObjectName("label_37")
        self.bw_util_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.bw_util_sat_sp_perf.setGeometry(QtCore.QRect(510, 147, 101, 22))
        self.bw_util_sat_sp_perf.setObjectName("bw_util_sat_sp_perf")
        self.label_40 = QtWidgets.QLabel(self.groupBox_5)
        self.label_40.setGeometry(QtCore.QRect(20, 191, 61, 16))
        self.label_40.setObjectName("label_40")
        self.rolloff_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.rolloff_sat_sp_perf.setGeometry(QtCore.QRect(200, 190, 101, 22))
        self.rolloff_sat_sp_perf.setObjectName("rolloff_sat_sp_perf")
        self.label_41 = QtWidgets.QLabel(self.groupBox_5)
        self.label_41.setGeometry(QtCore.QRect(330, 192, 91, 16))
        self.label_41.setObjectName("label_41")
        self.modcod_sat_sp_perf = QtWidgets.QComboBox(self.groupBox_5)
        self.modcod_sat_sp_perf.setGeometry(QtCore.QRect(450, 190, 161, 22))
        self.modcod_sat_sp_perf.setObjectName("modcod_sat_sp_perf")
        self.modcod_sat_sp_perf.addItem("")
        self.modcod_sat_sp_perf.addItem("")
        self.modcod_sat_sp_perf.addItem("")
        self.label_42 = QtWidgets.QLabel(self.groupBox_5)
        self.label_42.setGeometry(QtCore.QRect(20, 111, 131, 20))
        self.label_42.setObjectName("label_42")
        self.freq_sat_sp_perf = QtWidgets.QLineEdit(self.groupBox_5)
        self.freq_sat_sp_perf.setGeometry(QtCore.QRect(200, 111, 101, 22))
        self.freq_sat_sp_perf.setObjectName("freq_sat_sp_perf")
        self.label_6 = QtWidgets.QLabel(self.groupBox_5)
        self.label_6.setGeometry(QtCore.QRect(665, 97, 91, 20))
        self.label_6.setObjectName("label_6")
        self.pol_sat_sp_perf = QtWidgets.QComboBox(self.groupBox_5)
        self.pol_sat_sp_perf.setGeometry(QtCore.QRect(660, 121, 101, 22))
        self.pol_sat_sp_perf.setObjectName("pol_sat_sp_perf")
        self.pol_sat_sp_perf.addItem("")
        self.pol_sat_sp_perf.addItem("")
        self.pol_sat_sp_perf.addItem("")
        self.clear_sat_sp_perf = QtWidgets.QPushButton(self.groupBox_5)
        self.clear_sat_sp_perf.setGeometry(QtCore.QRect(653, 169, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_sat_sp_perf.setFont(font)
        self.clear_sat_sp_perf.setObjectName("clear_sat_sp_perf")
        self.groupBox_6 = QtWidgets.QGroupBox(self.single_point_perf_calc_page)
        self.groupBox_6.setGeometry(QtCore.QRect(10, 400, 801, 231))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_6.setFont(font)
        self.groupBox_6.setAutoFillBackground(False)
        self.groupBox_6.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox_6.setObjectName("groupBox_6")
        self.label_43 = QtWidgets.QLabel(self.groupBox_6)
        self.label_43.setGeometry(QtCore.QRect(20, 38, 55, 16))
        self.label_43.setObjectName("label_43")
        self.label_44 = QtWidgets.QLabel(self.groupBox_6)
        self.label_44.setGeometry(QtCore.QRect(20, 68, 151, 31))
        self.label_44.setObjectName("label_44")
        self.label_45 = QtWidgets.QLabel(self.groupBox_6)
        self.label_45.setGeometry(QtCore.QRect(20, 113, 161, 21))
        self.label_45.setObjectName("label_45")
        self.name_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.name_reception_sp_perf.setGeometry(QtCore.QRect(100, 38, 511, 22))
        self.name_reception_sp_perf.setObjectName("name_reception_sp_perf")
        self.lnb_gain_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.lnb_gain_reception_sp_perf.setGeometry(QtCore.QRect(200, 113, 101, 22))
        self.lnb_gain_reception_sp_perf.setObjectName("lnb_gain_reception_sp_perf")
        self.ant_size_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.ant_size_reception_sp_perf.setGeometry(QtCore.QRect(200, 74, 101, 22))
        self.ant_size_reception_sp_perf.setObjectName("ant_size_reception_sp_perf")
        self.save_reception_sp_perf = QtWidgets.QPushButton(self.groupBox_6)
        self.save_reception_sp_perf.setGeometry(QtCore.QRect(654, 189, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_reception_sp_perf.setFont(font)
        self.save_reception_sp_perf.setObjectName("save_reception_sp_perf")
        self.load_reception_sp_perf = QtWidgets.QPushButton(self.groupBox_6)
        self.load_reception_sp_perf.setGeometry(QtCore.QRect(654, 155, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_reception_sp_perf.setFont(font)
        self.load_reception_sp_perf.setObjectName("load_reception_sp_perf")
        self.label_46 = QtWidgets.QLabel(self.groupBox_6)
        self.label_46.setGeometry(QtCore.QRect(330, 78, 141, 16))
        self.label_46.setObjectName("label_46")
        self.ant_eff_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.ant_eff_reception_sp_perf.setGeometry(QtCore.QRect(510, 78, 101, 22))
        self.ant_eff_reception_sp_perf.setObjectName("ant_eff_reception_sp_perf")
        self.label_47 = QtWidgets.QLabel(self.groupBox_6)
        self.label_47.setGeometry(QtCore.QRect(330, 118, 161, 16))
        self.label_47.setObjectName("label_47")
        self.lnb_temp_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.lnb_temp_reception_sp_perf.setGeometry(QtCore.QRect(510, 115, 101, 22))
        self.lnb_temp_reception_sp_perf.setObjectName("lnb_temp_reception_sp_perf")
        self.label_48 = QtWidgets.QLabel(self.groupBox_6)
        self.label_48.setGeometry(QtCore.QRect(17, 139, 171, 51))
        self.label_48.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_48.setObjectName("label_48")
        self.coupling_loss_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.coupling_loss_reception_sp_perf.setGeometry(QtCore.QRect(200, 153, 101, 22))
        self.coupling_loss_reception_sp_perf.setObjectName("coupling_loss_reception_sp_perf")
        self.label_49 = QtWidgets.QLabel(self.groupBox_6)
        self.label_49.setGeometry(QtCore.QRect(19, 179, 171, 51))
        self.label_49.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_49.setObjectName("label_49")
        self.max_depoint_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.max_depoint_reception_sp_perf.setGeometry(QtCore.QRect(200, 192, 101, 22))
        self.max_depoint_reception_sp_perf.setObjectName("max_depoint_reception_sp_perf")
        self.label_5 = QtWidgets.QLabel(self.groupBox_6)
        self.label_5.setGeometry(QtCore.QRect(663, 12, 91, 20))
        self.label_5.setObjectName("label_5")
        self.pol_reception_sp_perf = QtWidgets.QComboBox(self.groupBox_6)
        self.pol_reception_sp_perf.setGeometry(QtCore.QRect(658, 42, 101, 22))
        self.pol_reception_sp_perf.setObjectName("pol_reception_sp_perf")
        self.pol_reception_sp_perf.addItem("")
        self.pol_reception_sp_perf.addItem("")
        self.pol_reception_sp_perf.addItem("")
        self.clear_reception_sp_perf = QtWidgets.QPushButton(self.groupBox_6)
        self.clear_reception_sp_perf.setGeometry(QtCore.QRect(654, 123, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_reception_sp_perf.setFont(font)
        self.clear_reception_sp_perf.setObjectName("clear_reception_sp_perf")
        self.cable_loss_reception_sp_perf = QtWidgets.QLineEdit(self.groupBox_6)
        self.cable_loss_reception_sp_perf.setGeometry(QtCore.QRect(509, 154, 101, 22))
        self.cable_loss_reception_sp_perf.setObjectName("cable_loss_reception_sp_perf")
        self.label_67 = QtWidgets.QLabel(self.groupBox_6)
        self.label_67.setGeometry(QtCore.QRect(330, 140, 171, 51))
        self.label_67.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_67.setObjectName("label_67")
        self.calc_sp_perf = QtWidgets.QPushButton(self.single_point_perf_calc_page)
        self.calc_sp_perf.setGeometry(QtCore.QRect(670, 830, 141, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.calc_sp_perf.setFont(font)
        self.calc_sp_perf.setObjectName("calc_sp_perf")
        self.output_sp_perf = QtWidgets.QTextEdit(self.single_point_perf_calc_page)
        self.output_sp_perf.setGeometry(QtCore.QRect(10, 638, 801, 181))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.output_sp_perf.setFont(font)
        self.output_sp_perf.setObjectName("output_sp_perf")
        self.label_4 = QtWidgets.QLabel(self.single_point_perf_calc_page)
        self.label_4.setGeometry(QtCore.QRect(10, 830, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.relaxation_sp_perf = QtWidgets.QLineEdit(self.single_point_perf_calc_page)
        self.relaxation_sp_perf.setGeometry(QtCore.QRect(170, 830, 51, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.relaxation_sp_perf.setFont(font)
        self.relaxation_sp_perf.setToolTip("")
        self.relaxation_sp_perf.setObjectName("relaxation_sp_perf")
        self.margin_sp_perf = QtWidgets.QLineEdit(self.single_point_perf_calc_page)
        self.margin_sp_perf.setGeometry(QtCore.QRect(340, 830, 61, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.margin_sp_perf.setFont(font)
        self.margin_sp_perf.setToolTip("")
        self.margin_sp_perf.setObjectName("margin_sp_perf")
        self.label_173 = QtWidgets.QLabel(self.single_point_perf_calc_page)
        self.label_173.setGeometry(QtCore.QRect(240, 830, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_173.setFont(font)
        self.label_173.setObjectName("label_173")
        self.stackedWidget.addWidget(self.single_point_perf_calc_page)
        self.list_perf_calc_page = QtWidgets.QWidget()
        self.list_perf_calc_page.setObjectName("list_perf_calc_page")
        self.browse_path_mp_perf = QtWidgets.QPushButton(self.list_perf_calc_page)
        self.browse_path_mp_perf.setGeometry(QtCore.QRect(700, 11, 93, 21))
        self.browse_path_mp_perf.setObjectName("browse_path_mp_perf")
        self.label_10 = QtWidgets.QLabel(self.list_perf_calc_page)
        self.label_10.setGeometry(QtCore.QRect(6, 13, 55, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.preview_mp_perf = QtWidgets.QTableWidget(self.list_perf_calc_page)
        self.preview_mp_perf.setGeometry(QtCore.QRect(10, 61, 801, 131))
        self.preview_mp_perf.setObjectName("preview_mp_perf")
        self.preview_mp_perf.setColumnCount(0)
        self.preview_mp_perf.setRowCount(0)
        self.label_11 = QtWidgets.QLabel(self.list_perf_calc_page)
        self.label_11.setGeometry(QtCore.QRect(10, 41, 91, 16))
        self.label_11.setObjectName("label_11")
        self.groupBox_10 = QtWidgets.QGroupBox(self.list_perf_calc_page)
        self.groupBox_10.setGeometry(QtCore.QRect(8, 199, 801, 261))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_10.setFont(font)
        self.groupBox_10.setAutoFillBackground(False)
        self.groupBox_10.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox_10.setObjectName("groupBox_10")
        self.label_71 = QtWidgets.QLabel(self.groupBox_10)
        self.label_71.setGeometry(QtCore.QRect(20, 27, 55, 16))
        self.label_71.setObjectName("label_71")
        self.label_72 = QtWidgets.QLabel(self.groupBox_10)
        self.label_72.setGeometry(QtCore.QRect(20, 69, 161, 21))
        self.label_72.setObjectName("label_72")
        self.name_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.name_sat_mp_perf.setGeometry(QtCore.QRect(100, 27, 511, 22))
        self.name_sat_mp_perf.setObjectName("name_sat_mp_perf")
        self.long_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.long_sat_mp_perf.setGeometry(QtCore.QRect(200, 69, 101, 22))
        self.long_sat_mp_perf.setObjectName("long_sat_mp_perf")
        self.save_sat_mp_perf = QtWidgets.QPushButton(self.groupBox_10)
        self.save_sat_mp_perf.setGeometry(QtCore.QRect(658, 222, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_sat_mp_perf.setFont(font)
        self.save_sat_mp_perf.setObjectName("save_sat_mp_perf")
        self.load_sat_mp_perf = QtWidgets.QPushButton(self.groupBox_10)
        self.load_sat_mp_perf.setGeometry(QtCore.QRect(658, 190, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_sat_mp_perf.setFont(font)
        self.load_sat_mp_perf.setObjectName("load_sat_mp_perf")
        self.default_sat_mp_perf = QtWidgets.QComboBox(self.groupBox_10)
        self.default_sat_mp_perf.setGeometry(QtCore.QRect(650, 58, 131, 22))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.default_sat_mp_perf.setFont(font)
        self.default_sat_mp_perf.setObjectName("default_sat_mp_perf")
        self.default_sat_mp_perf.addItem("")
        self.default_sat_mp_perf.addItem("")
        self.default_sat_mp_perf.addItem("")
        self.default_sat_mp_perf.addItem("")
        self.label_73 = QtWidgets.QLabel(self.groupBox_10)
        self.label_73.setGeometry(QtCore.QRect(651, 29, 131, 16))
        self.label_73.setObjectName("label_73")
        self.label_74 = QtWidgets.QLabel(self.groupBox_10)
        self.label_74.setGeometry(QtCore.QRect(330, 70, 111, 16))
        self.label_74.setObjectName("label_74")
        self.height_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.height_sat_mp_perf.setGeometry(QtCore.QRect(510, 67, 101, 22))
        self.height_sat_mp_perf.setObjectName("height_sat_mp_perf")
        self.label_75 = QtWidgets.QLabel(self.groupBox_10)
        self.label_75.setGeometry(QtCore.QRect(330, 108, 121, 16))
        self.label_75.setObjectName("label_75")
        self.eirp_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.eirp_sat_mp_perf.setGeometry(QtCore.QRect(510, 104, 101, 22))
        self.eirp_sat_mp_perf.setObjectName("eirp_sat_mp_perf")
        self.label_76 = QtWidgets.QLabel(self.groupBox_10)
        self.label_76.setGeometry(QtCore.QRect(20, 137, 171, 51))
        self.label_76.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_76.setObjectName("label_76")
        self.max_bw_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.max_bw_sat_mp_perf.setGeometry(QtCore.QRect(200, 147, 101, 22))
        self.max_bw_sat_mp_perf.setObjectName("max_bw_sat_mp_perf")
        self.label_77 = QtWidgets.QLabel(self.groupBox_10)
        self.label_77.setGeometry(QtCore.QRect(330, 132, 171, 51))
        self.label_77.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_77.setObjectName("label_77")
        self.bw_util_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.bw_util_sat_mp_perf.setGeometry(QtCore.QRect(510, 145, 101, 22))
        self.bw_util_sat_mp_perf.setObjectName("bw_util_sat_mp_perf")
        self.label_80 = QtWidgets.QLabel(self.groupBox_10)
        self.label_80.setGeometry(QtCore.QRect(20, 191, 61, 16))
        self.label_80.setObjectName("label_80")
        self.rolloff_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.rolloff_sat_mp_perf.setGeometry(QtCore.QRect(200, 191, 101, 22))
        self.rolloff_sat_mp_perf.setObjectName("rolloff_sat_mp_perf")
        self.label_81 = QtWidgets.QLabel(self.groupBox_10)
        self.label_81.setGeometry(QtCore.QRect(330, 191, 91, 16))
        self.label_81.setObjectName("label_81")
        self.modcod_sat_mp_perf = QtWidgets.QComboBox(self.groupBox_10)
        self.modcod_sat_mp_perf.setGeometry(QtCore.QRect(450, 191, 161, 22))
        self.modcod_sat_mp_perf.setObjectName("modcod_sat_mp_perf")
        self.modcod_sat_mp_perf.addItem("")
        self.modcod_sat_mp_perf.addItem("")
        self.modcod_sat_mp_perf.addItem("")
        self.label_82 = QtWidgets.QLabel(self.groupBox_10)
        self.label_82.setGeometry(QtCore.QRect(20, 109, 131, 20))
        self.label_82.setObjectName("label_82")
        self.freq_sat_mp_perf = QtWidgets.QLineEdit(self.groupBox_10)
        self.freq_sat_mp_perf.setGeometry(QtCore.QRect(200, 109, 101, 22))
        self.freq_sat_mp_perf.setObjectName("freq_sat_mp_perf")
        self.label_12 = QtWidgets.QLabel(self.groupBox_10)
        self.label_12.setGeometry(QtCore.QRect(666, 89, 91, 20))
        self.label_12.setObjectName("label_12")
        self.pol_sat_mp_perf = QtWidgets.QComboBox(self.groupBox_10)
        self.pol_sat_mp_perf.setGeometry(QtCore.QRect(663, 119, 101, 22))
        self.pol_sat_mp_perf.setObjectName("pol_sat_mp_perf")
        self.pol_sat_mp_perf.addItem("")
        self.pol_sat_mp_perf.addItem("")
        self.pol_sat_mp_perf.addItem("")
        self.clear_satellite_mp_perf = QtWidgets.QPushButton(self.groupBox_10)
        self.clear_satellite_mp_perf.setGeometry(QtCore.QRect(658, 156, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_satellite_mp_perf.setFont(font)
        self.clear_satellite_mp_perf.setObjectName("clear_satellite_mp_perf")
        self.groupBox_11 = QtWidgets.QGroupBox(self.list_perf_calc_page)
        self.groupBox_11.setGeometry(QtCore.QRect(10, 458, 801, 221))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox_11.setFont(font)
        self.groupBox_11.setAutoFillBackground(False)
        self.groupBox_11.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.groupBox_11.setObjectName("groupBox_11")
        self.label_83 = QtWidgets.QLabel(self.groupBox_11)
        self.label_83.setGeometry(QtCore.QRect(20, 38, 55, 16))
        self.label_83.setObjectName("label_83")
        self.label_84 = QtWidgets.QLabel(self.groupBox_11)
        self.label_84.setGeometry(QtCore.QRect(20, 68, 151, 31))
        self.label_84.setObjectName("label_84")
        self.label_85 = QtWidgets.QLabel(self.groupBox_11)
        self.label_85.setGeometry(QtCore.QRect(20, 113, 161, 21))
        self.label_85.setObjectName("label_85")
        self.name_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.name_reception_mp_perf.setGeometry(QtCore.QRect(100, 38, 511, 22))
        self.name_reception_mp_perf.setObjectName("name_reception_mp_perf")
        self.lnb_gain_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.lnb_gain_reception_mp_perf.setGeometry(QtCore.QRect(200, 113, 101, 22))
        self.lnb_gain_reception_mp_perf.setObjectName("lnb_gain_reception_mp_perf")
        self.ant_size_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.ant_size_reception_mp_perf.setGeometry(QtCore.QRect(200, 74, 101, 22))
        self.ant_size_reception_mp_perf.setObjectName("ant_size_reception_mp_perf")
        self.save_reception_mp_perf = QtWidgets.QPushButton(self.groupBox_11)
        self.save_reception_mp_perf.setGeometry(QtCore.QRect(656, 186, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.save_reception_mp_perf.setFont(font)
        self.save_reception_mp_perf.setObjectName("save_reception_mp_perf")
        self.load_reception_mp_perf = QtWidgets.QPushButton(self.groupBox_11)
        self.load_reception_mp_perf.setGeometry(QtCore.QRect(656, 151, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.load_reception_mp_perf.setFont(font)
        self.load_reception_mp_perf.setObjectName("load_reception_mp_perf")
        self.label_86 = QtWidgets.QLabel(self.groupBox_11)
        self.label_86.setGeometry(QtCore.QRect(330, 78, 141, 16))
        self.label_86.setObjectName("label_86")
        self.ant_eff_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.ant_eff_reception_mp_perf.setGeometry(QtCore.QRect(510, 78, 101, 22))
        self.ant_eff_reception_mp_perf.setObjectName("ant_eff_reception_mp_perf")
        self.label_87 = QtWidgets.QLabel(self.groupBox_11)
        self.label_87.setGeometry(QtCore.QRect(330, 118, 161, 16))
        self.label_87.setScaledContents(False)
        self.label_87.setObjectName("label_87")
        self.lnb_temp_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.lnb_temp_reception_mp_perf.setGeometry(QtCore.QRect(510, 115, 101, 22))
        self.lnb_temp_reception_mp_perf.setObjectName("lnb_temp_reception_mp_perf")
        self.label_88 = QtWidgets.QLabel(self.groupBox_11)
        self.label_88.setGeometry(QtCore.QRect(20, 132, 171, 51))
        self.label_88.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_88.setObjectName("label_88")
        self.coupling_loss_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.coupling_loss_reception_mp_perf.setGeometry(QtCore.QRect(200, 146, 101, 22))
        self.coupling_loss_reception_mp_perf.setObjectName("coupling_loss_reception_mp_perf")
        self.label_89 = QtWidgets.QLabel(self.groupBox_11)
        self.label_89.setGeometry(QtCore.QRect(20, 170, 171, 51))
        self.label_89.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_89.setObjectName("label_89")
        self.max_depoint_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.max_depoint_reception_mp_perf.setGeometry(QtCore.QRect(200, 190, 101, 22))
        self.max_depoint_reception_mp_perf.setObjectName("max_depoint_reception_mp_perf")
        self.label_13 = QtWidgets.QLabel(self.groupBox_11)
        self.label_13.setGeometry(QtCore.QRect(665, 20, 91, 20))
        self.label_13.setObjectName("label_13")
        self.pol_reception_mp_perf = QtWidgets.QComboBox(self.groupBox_11)
        self.pol_reception_mp_perf.setGeometry(QtCore.QRect(660, 50, 101, 22))
        self.pol_reception_mp_perf.setObjectName("pol_reception_mp_perf")
        self.pol_reception_mp_perf.addItem("")
        self.pol_reception_mp_perf.addItem("")
        self.pol_reception_mp_perf.addItem("")
        self.clear_reception_mp_perf = QtWidgets.QPushButton(self.groupBox_11)
        self.clear_reception_mp_perf.setGeometry(QtCore.QRect(656, 115, 111, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.clear_reception_mp_perf.setFont(font)
        self.clear_reception_mp_perf.setObjectName("clear_reception_mp_perf")
        self.cable_loss_reception_mp_perf = QtWidgets.QLineEdit(self.groupBox_11)
        self.cable_loss_reception_mp_perf.setGeometry(QtCore.QRect(510, 150, 101, 22))
        self.cable_loss_reception_mp_perf.setObjectName("cable_loss_reception_mp_perf")
        self.label_90 = QtWidgets.QLabel(self.groupBox_11)
        self.label_90.setGeometry(QtCore.QRect(330, 133, 171, 51))
        self.label_90.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_90.setObjectName("label_90")
        self.output_sp_perf_2 = QtWidgets.QTextEdit(self.list_perf_calc_page)
        self.output_sp_perf_2.setGeometry(QtCore.QRect(10, 684, 801, 141))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.output_sp_perf_2.setFont(font)
        self.output_sp_perf_2.setObjectName("output_sp_perf_2")
        self.relaxation_mp_perf = QtWidgets.QLineEdit(self.list_perf_calc_page)
        self.relaxation_mp_perf.setGeometry(QtCore.QRect(170, 832, 51, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.relaxation_mp_perf.setFont(font)
        self.relaxation_mp_perf.setToolTip("")
        self.relaxation_mp_perf.setObjectName("relaxation_mp_perf")
        self.calc_mp_perf = QtWidgets.QPushButton(self.list_perf_calc_page)
        self.calc_mp_perf.setGeometry(QtCore.QRect(670, 830, 141, 28))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.calc_mp_perf.setFont(font)
        self.calc_mp_perf.setObjectName("calc_mp_perf")
        self.label_14 = QtWidgets.QLabel(self.list_perf_calc_page)
        self.label_14.setGeometry(QtCore.QRect(10, 833, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.list_perf_calc_page)
        self.label_15.setGeometry(QtCore.QRect(420, 831, 61, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.n_threads = QtWidgets.QComboBox(self.list_perf_calc_page)
        self.n_threads.setGeometry(QtCore.QRect(490, 831, 73, 22))
        self.n_threads.setObjectName("n_threads")
        self.path_mp_perf = QtWidgets.QLineEdit(self.list_perf_calc_page)
        self.path_mp_perf.setGeometry(QtCore.QRect(55, 10, 631, 22))
        self.path_mp_perf.setObjectName("path_mp_perf")
        self.label_16 = QtWidgets.QLabel(self.list_perf_calc_page)
        self.label_16.setGeometry(QtCore.QRect(240, 831, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_16.setFont(font)
        self.label_16.setObjectName("label_16")
        self.margin_mp_perf = QtWidgets.QLineEdit(self.list_perf_calc_page)
        self.margin_mp_perf.setGeometry(QtCore.QRect(340, 831, 61, 22))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.margin_mp_perf.setFont(font)
        self.margin_mp_perf.setToolTip("")
        self.margin_mp_perf.setObjectName("margin_mp_perf")
        self.stackedWidget.addWidget(self.list_perf_calc_page)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 820, 26))
        self.menubar.setObjectName("menubar")
        self.menuNew = QtWidgets.QMenu(self.menubar)
        self.menuNew.setObjectName("menuNew")
        self.menuCalculation = QtWidgets.QMenu(self.menubar)
        self.menuCalculation.setObjectName("menuCalculation")
        self.menuList_Calculation = QtWidgets.QMenu(self.menubar)
        self.menuList_Calculation.setObjectName("menuList_Calculation")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.action_New_Satellite = QtWidgets.QAction(MainWindow)
        self.action_New_Satellite.setObjectName("action_New_Satellite")
        self.actionReception = QtWidgets.QAction(MainWindow)
        self.actionReception.setObjectName("actionReception")
        self.action_New_Ground_Station = QtWidgets.QAction(MainWindow)
        self.action_New_Ground_Station.setObjectName("action_New_Ground_Station")
        self.action_Single_Atmospheric_Atenuation = QtWidgets.QAction(MainWindow)
        self.action_Single_Atmospheric_Atenuation.setObjectName("action_Single_Atmospheric_Atenuation")
        self.action_Single_Downlink_Performance = QtWidgets.QAction(MainWindow)
        self.action_Single_Downlink_Performance.setObjectName("action_Single_Downlink_Performance")
        self.actionDownlink_Performance = QtWidgets.QAction(MainWindow)
        self.actionDownlink_Performance.setObjectName("actionDownlink_Performance")
        self.menuNew.addAction(self.action_New_Satellite)
        self.menuNew.addAction(self.action_New_Ground_Station)
        self.menuNew.addAction(self.actionReception)
        self.menuCalculation.addAction(self.action_Single_Atmospheric_Atenuation)
        self.menuCalculation.addAction(self.action_Single_Downlink_Performance)
        self.menuList_Calculation.addAction(self.actionDownlink_Performance)
        self.menubar.addAction(self.menuNew.menuAction())
        self.menubar.addAction(self.menuCalculation.menuAction())
        self.menubar.addAction(self.menuList_Calculation.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(5)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # ===================================== HERE GOES MY CODE! ======================================================

        self.stackedWidget.setCurrentIndex(0)  # selecting the initial application's page

        ######### change window actions buttons ##########
        self.action_New_Satellite.triggered.connect(lambda state, x=1: self.change_page(x))
        self.action_New_Ground_Station.triggered.connect(lambda state, x=2: self.change_page(x))
        self.actionReception.triggered.connect(lambda state, x=3: self.change_page(x))
        self.action_Single_Atmospheric_Atenuation.triggered.connect(lambda state, x=4: self.change_page(x))
        self.action_Single_Downlink_Performance.triggered.connect(lambda state, x=5: self.change_page(x))
        self.actionDownlink_Performance.triggered.connect(lambda state, x=6: self.change_page(x))

        ################# calculation buttons #####################
        self.calc_spatm.clicked.connect(
            self.single_point_atm_atnn_calc)  # Single point atmospheric attenuation calc button activation
        self.calc_sp_perf.clicked.connect(self.single_point_calc_perf)
        self.calc_mp_perf.clicked.connect(self.multi_point_calc_perf)

        ########################saves and load boxes ##########################
        # main satellite save/load/clear screen
        self.load_sat.clicked.connect(lambda state, opt='load': self.load_save_sat(opt))
        self.save_sat.clicked.connect(lambda state, opt='save': self.load_save_sat(opt))
        self.clear_sat.clicked.connect(lambda state, opt='clear': self.load_save_sat(opt))

        # main ground station save/load/clear screen
        self.load_ground_station_gdstation.clicked.connect(lambda state, opt='load': self.load_save_gr_station(opt))
        self.save_ground_station_gdstation.clicked.connect(lambda state, opt='save': self.load_save_gr_station(opt))
        self.clear_ground_station_gdstation.clicked.connect(lambda state, opt='clear': self.load_save_gr_station(opt))

        # main reception save/load/clear screen
        self.load_reception_rcp.clicked.connect(lambda state, opt='load': self.load_save_reception(opt))
        self.save_reception_rcp.clicked.connect(lambda state, opt='save': self.load_save_reception(opt))
        self.clear_reception_rcp.clicked.connect(lambda state, opt='clear': self.load_save_reception(opt))

        #list path browse
        self.browse_path_mp_perf.clicked.connect(self.load_point_list)

        # single point link performance screen
        self.load_ground_station_sp_perf.clicked.connect(
            lambda state, opt='load', item='gst': self.load_save_single_point_perf(opt, item))
        self.save_ground_station_sp_perf.clicked.connect(
            lambda state, opt='save', item='gst': self.load_save_single_point_perf(opt, item))
        self.clear_ground_station_sp_perf.clicked.connect(
            lambda state, opt='clear', item='gst': self.load_save_single_point_perf(opt, item))
        self.load_sat_sp_perf.clicked.connect(
            lambda state, opt='load', item='sat': self.load_save_single_point_perf(opt, item))
        self.save_sat_sp_perf.clicked.connect(
            lambda state, opt='save', item='sat': self.load_save_single_point_perf(opt, item))
        self.clear_sat_sp_perf.clicked.connect(
            lambda state, opt='clear', item='sat': self.load_save_single_point_perf(opt, item))
        self.load_reception_sp_perf.clicked.connect(
            lambda state, opt='load', item='rcp': self.load_save_single_point_perf(opt, item))
        self.save_reception_sp_perf.clicked.connect(
            lambda state, opt='save', item='rcp': self.load_save_single_point_perf(opt, item))
        self.clear_reception_sp_perf.clicked.connect(
            lambda state, opt='clear', item='rcp': self.load_save_single_point_perf(opt, item))

        #list performance screen
        self.load_sat_mp_perf.clicked.connect(
            lambda state, opt='load', item='sat': self.load_save_multi_point_perf(opt, item))
        self.save_sat_mp_perf.clicked.connect(
            lambda state, opt='save', item='sat': self.load_save_multi_point_perf(opt, item))
        self.clear_satellite_mp_perf.clicked.connect(
            lambda state, opt='clear', item='sat': self.load_save_multi_point_perf(opt, item))
        self.load_reception_mp_perf.clicked.connect(
            lambda state, opt='load', item='rcp': self.load_save_multi_point_perf(opt, item))
        self.save_reception_mp_perf.clicked.connect(
            lambda state, opt='save', item='rcp': self.load_save_multi_point_perf(opt, item))
        self.clear_reception_mp_perf.clicked.connect(
            lambda state, opt='clear', item='rcp': self.load_save_multi_point_perf(opt, item))

        ########################################################################

        # creating the combo boxes options from files
        import pandas as pd
        data = pd.read_csv('models\\Modulation_dB.csv', sep=';')['Modcod']
        data = data.values.tolist()
        self.modcod_sat_mp_perf.addItems(data)
        self.modcod_sat_sp_perf.addItems(data)
        self.modcod_sat.addItems(data)
        self.modcod_sat_mp_perf.currentIndexChanged.connect(lambda state, x=3: self.on_combobox_changed(x))
        self.modcod_sat_sp_perf.currentIndexChanged.connect(lambda state, x=2: self.on_combobox_changed(x))
        self.modcod_sat.currentIndexChanged.connect(lambda state, x=1: self.on_combobox_changed(x))

        #threads number combo box
        import multiprocessing
        cores = multiprocessing.cpu_count()
        print('Max threads: ', cores)
        if cores > 63:
            cores = 63
        n_thread_list = [1]
        n_thread_list.extend(range(2, cores - 1, round(cores/4)))
        n_thread_list = map(str, n_thread_list)
        self.n_threads.addItems(n_thread_list)

        # deleting temp files
        import os
        if os.path.exists('temp\\save.pkl'):
            os.remove('temp\\save.pkl')
        if os.path.exists('temp\\load.pkl'):
            os.remove('temp\\load.pkl')
        if os.path.exists('temp\\args.pkl'):
            os.remove('temp\\args.pkl')
        if os.path.exists("temp\\out.txt"):
            os.remove("temp\\out.txt")

        #maintaing updatable texts
        self._update_timer = QtCore.QTimer()
        self._update_timer.timeout.connect(lambda index=3: self.update_label(index))
        self._update_timer.start(1000)  # milliseconds


    def kill_threadpoll(self, cnt):
        if cnt != 1:
            print('fui!')
            print(cnt)
            # self.threadpool.deleteLater()
        return

    def load_save_sat(self, opt):
        import pickle
        import os
        from file_dialog import open_dialog
        type = 'Sat Files (*.sat)'
        if opt != 'clear':
            open_dialog(opt, type)
        try:
            with open('temp\\' + opt + '.pkl', 'rb') as f:
                folder = pickle.load(f)
                print(folder)
                f.close()
        except:
            folder = ''
        if opt == 'save':
            if folder != '':
                folder = folder + '.sat'
                try:
                    name_sat = str(self.name_sat.text())
                    long_sat = float(self.long_sat.text())
                    height_sat = float(self.height_sat.text())
                    freq = float(self.freq_sat.text())
                    eirp_sat = float(self.eirp_sat.text())
                    max_bw_sat = float(self.max_bw_sat.text())
                    bw_util = float(self.bw_util_sat.text())
                    rolloff_sat = float(self.rolloff_sat.text())
                    modulation = str(self.modcod_sat.currentText())
                    pol = str(self.pol_sat.currentText())

                except:
                    QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                    return

                with open(folder, 'wb') as f:
                    pickle.dump([name_sat, long_sat, height_sat, freq, eirp_sat,
                                 max_bw_sat, bw_util, rolloff_sat, modulation, pol], f)
                    f.close()

            if os.path.exists('temp\\save.pkl'):
                os.remove('temp\\save.pkl')

        elif opt == 'load':
            if folder != '':
                with open(folder, 'rb') as f:
                    name_sat, long_sat, height_sat, freq, eirp_sat, max_bw_sat, bw_util, rolloff_sat, modulation, pol = pickle.load(
                        f)
                    f.close()
                self.name_sat.setText(str(name_sat))
                self.long_sat.setText(str(long_sat))
                self.height_sat.setText(str(height_sat))
                self.freq_sat.setText(str(freq))
                self.eirp_sat.setText(str(eirp_sat))
                self.max_bw_sat.setText(str(max_bw_sat))
                self.bw_util_sat.setText(str(bw_util))
                self.rolloff_sat.setText(str(rolloff_sat))
                index = self.pol_sat.findText(str(pol), QtCore.Qt.MatchFixedString)
                if index >= 0:
                    self.pol_sat.setCurrentIndex(index)
                index = self.modcod_sat.findText(str(modulation), QtCore.Qt.MatchFixedString)
                if index >= 0:
                    self.modcod_sat.setCurrentIndex(index)

                if os.path.exists('temp\\load.pkl'):
                    os.remove('temp\\load.pkl')

        elif opt == 'clear':
            self.name_sat.clear()
            self.long_sat.clear()
            self.height_sat.clear()
            self.freq_sat.clear()
            self.eirp_sat.clear()
            self.max_bw_sat.clear()
            self.bw_util_sat.clear()
            self.rolloff_sat.clear()
            self.pol_sat.setCurrentIndex(0)
            self.modcod_sat.setCurrentIndex(0)

    def load_save_gr_station(self, opt):
        import pickle
        import os
        from file_dialog import open_dialog
        type = 'Ground Station Files (*.gst)'
        if opt != 'clear':
            open_dialog(opt, type)
        try:
            with open('temp\\' + opt + '.pkl', 'rb') as f:
                folder = pickle.load(f)
                print(folder)
                f.close()
        except:
            folder = ''
        if opt == 'save':
            if folder != '':
                folder = folder + '.gst'
                try:
                    name_grst = str(self.name_ground_station_grstat.text())
                    lat_gst = float(self.lat_ground_station_grstat.text())
                    long_gst = float(self.long_ground_station_grstat.text())
                except:
                    QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                    return

                with open(folder, 'wb') as f:
                    pickle.dump([name_grst, lat_gst, long_gst], f)
                    f.close()

            if os.path.exists('temp\\save.pkl'):
                os.remove('temp\\save.pkl')

        elif opt == 'load':
            if folder != '':
                with open(folder, 'rb') as f:
                    name_grst, lat_gst, long_gst = pickle.load(f)
                    f.close()
                self.name_ground_station_grstat.setText(str(name_grst))
                self.lat_ground_station_grstat.setText(str(lat_gst))
                self.long_ground_station_grstat.setText(str(long_gst))

            if os.path.exists('temp\\load.pkl'):
                os.remove('temp\\load.pkl')

        elif opt == 'clear':
            self.name_ground_station_grstat.clear()
            self.lat_ground_station_grstat.clear()
            self.long_ground_station_grstat.clear()

    def load_save_reception(self, opt):
        import pickle
        import os
        from file_dialog import open_dialog
        type = 'Reception Setup Files (*.rcp)'
        if opt != 'clear':
            open_dialog(opt, type)
        try:
            with open('temp\\' + opt + '.pkl', 'rb') as f:
                folder = pickle.load(f)
                # print(folder)
                f.close()
        except:
            folder = ''
        if opt == 'save':
            if folder != '':
                folder = folder + '.rcp'
                try:
                    name_rcp = str(self.name_reception_rcp.text())
                    ant_size = float(self.ant_size_reception_rcp.text())
                    ant_eff = float(self.ant_eff_reception_rcp.text())
                    lnb_gain = float(self.lnb_gain_reception_rcp.text())
                    lnb_temp = float(self.lnb_temp_reception_rcp.text())
                    coupling_loss = float(self.coupling_loss_reception_rcp.text())
                    cable_loss = float(self.cable_loss_reception_rcp.text())
                    max_depoint = float(self.max_depoint_reception_rcp.text())
                    pol = str(self.pol_reception_rcp.currentText())
                except:
                    QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                    return

                with open(folder, 'wb') as f:
                    pickle.dump([name_rcp, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss, cable_loss, max_depoint, pol], f)
                    f.close()

            if os.path.exists('temp\\save.pkl'):
                os.remove('temp\\save.pkl')

        elif opt == 'load':
            if folder != '':
                with open(folder, 'rb') as f:
                    name_rcp, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss, cable_loss, max_depoint, pol = pickle.load(f)
                    f.close()
                self.name_reception_rcp.setText(str(name_rcp))
                self.ant_size_reception_rcp.setText(str(ant_size))
                self.ant_eff_reception_rcp.setText(str(ant_eff))
                self.lnb_gain_reception_rcp.setText(str(lnb_gain))
                self.lnb_temp_reception_rcp.setText(str(lnb_temp))
                self.coupling_loss_reception_rcp.setText(str(coupling_loss))
                self.cable_loss_reception_rcp.setText(str(cable_loss))
                self.max_depoint_reception_rcp.setText(str(max_depoint))
                index = self.pol_reception_rcp.findText(str(pol), QtCore.Qt.MatchFixedString)
                if index >= 0:
                    self.pol_reception_rcp.setCurrentIndex(index)

            if os.path.exists('temp\\load.pkl'):
                os.remove('temp\\load.pkl')

        elif opt == 'clear':
            self.name_reception_rcp.clear()
            self.ant_size_reception_rcp.clear()
            self.ant_eff_reception_rcp.clear()
            self.lnb_gain_reception_rcp.clear()
            self.lnb_temp_reception_rcp.clear()
            self.coupling_loss_reception_rcp.clear()
            self.cable_loss_reception_rcp.clear()
            self.max_depoint_reception_rcp.clear()
            self.pol_reception_rcp.setCurrentIndex(0)

    def load_save_single_point_perf(self, opt, item):
        import pickle
        import os
        from file_dialog import open_dialog

        if item == 'gst':
            type = 'Ground Station Files (*.gst)'
            if opt != 'clear':
                open_dialog(opt, type)
            try:
                with open('temp\\' + opt + '.pkl', 'rb') as f:
                    folder = pickle.load(f)
                    # print(folder)
                    f.close()
            except:
                folder = ''

            if opt == 'save':
                if folder != '':
                    folder = folder + '.gst'
                    try:
                        name_grst = str(self.name_ground_station_sp_perf.text())
                        lat_gst = float(self.lat_ground_station_sp_perf.text())
                        long_gst = float(self.long_ground_station_sp_perf.text())
                    except:
                        QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                        return

                    with open(folder, 'wb') as f:
                        pickle.dump([name_grst, lat_gst, long_gst], f)
                        f.close()

                if os.path.exists('temp\\save.pkl'):
                    os.remove('temp\\save.pkl')

            elif opt == 'load':
                if folder != '':
                    with open(folder, 'rb') as f:
                        name_grst, lat_gst, long_gst = pickle.load(f)
                        f.close()
                    self.name_ground_station_sp_perf.setText(str(name_grst))
                    self.lat_ground_station_sp_perf.setText(str(lat_gst))
                    self.long_ground_station_sp_perf.setText(str(long_gst))

                if os.path.exists('temp\\load.pkl'):
                    os.remove('temp\\load.pkl')

            elif opt == 'clear':
                self.name_ground_station_sp_perf.clear()
                self.lat_ground_station_sp_perf.clear()
                self.long_ground_station_sp_perf.clear()

        elif item == 'sat':
            type = 'Sat Files (*.sat)'
            if opt != 'clear':
                open_dialog(opt, type)
            try:
                with open('temp\\' + opt + '.pkl', 'rb') as f:
                    folder = pickle.load(f)
                    # print(folder)
                    f.close()
            except:
                folder = ''
            if opt == 'save':
                if folder != '':
                    folder = folder + '.sat'
                    try:
                        name_sat = str(self.name_sat_sp_perf.text())
                        long_sat = float(self.long_sat_sp_perf.text())
                        height_sat = float(self.height_sat_sp_perf.text())
                        freq = float(self.freq_sat_sp_perf.text())
                        eirp_sat = float(self.eirp_sat_sp_perf.text())
                        max_bw_sat = float(self.max_bw_sat_sp_perf.text())
                        bw_util = float(self.bw_util_sat_sp_perf.text())
                        rolloff_sat = float(self.rolloff_sat_sp_perf.text())
                        modulation = str(self.modcod_sat_sp_perf.currentText())
                        pol = str(self.pol_sat_sp_perf.currentText())

                    except:
                        QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                        return

                    with open(folder, 'wb') as f:
                        pickle.dump([name_sat, long_sat, height_sat, freq, eirp_sat,
                                     max_bw_sat, bw_util, rolloff_sat, modulation, pol], f)
                        f.close()

                if os.path.exists('temp\\save.pkl'):
                    os.remove('temp\\save.pkl')

            elif opt == 'load':
                if folder != '':
                    with open(folder, 'rb') as f:
                        name_sat, long_sat, height_sat, freq, eirp_sat, max_bw_sat, bw_util, rolloff_sat, modulation, pol = pickle.load(
                            f)
                        f.close()
                    self.name_sat_sp_perf.setText(str(name_sat))
                    self.long_sat_sp_perf.setText(str(long_sat))
                    self.height_sat_sp_perf.setText(str(height_sat))
                    self.freq_sat_sp_perf.setText(str(freq))
                    self.eirp_sat_sp_perf.setText(str(eirp_sat))
                    self.max_bw_sat_sp_perf.setText(str(max_bw_sat))
                    self.bw_util_sat_sp_perf.setText(str(bw_util))
                    self.rolloff_sat_sp_perf.setText(str(rolloff_sat))
                    index = self.pol_sat_sp_perf.findText(str(pol), QtCore.Qt.MatchFixedString)
                    if index >= 0:
                        self.pol_sat_sp_perf.setCurrentIndex(index)
                    index = self.modcod_sat_sp_perf.findText(str(modulation), QtCore.Qt.MatchFixedString)
                    if index >= 0:
                        self.modcod_sat_sp_perf.setCurrentIndex(index)

                if os.path.exists('temp\\load.pkl'):
                    os.remove('temp\\load.pkl')

            elif opt == 'clear':
                self.name_sat_sp_perf.clear()
                self.long_sat_sp_perf.clear()
                self.height_sat_sp_perf.clear()
                self.freq_sat_sp_perf.clear()
                self.eirp_sat_sp_perf.clear()
                self.max_bw_sat_sp_perf.clear()
                self.bw_util_sat_sp_perf.clear()
                self.rolloff_sat_sp_perf.clear()
                self.pol_sat_sp_perf.setCurrentIndex(0)
                self.modcod_sat_sp_perf.setCurrentIndex(0)

        elif item == 'rcp':
            type = 'Reception Setup Files (*.rcp)'
            if opt != 'clear':
                open_dialog(opt, type)
            try:
                with open('temp\\' + opt + '.pkl', 'rb') as f:
                    folder = pickle.load(f)
                    # print(folder)
                    f.close()
            except:
                folder = ''
            if opt == 'save':
                if folder != '':
                    folder = folder + '.rcp'
                    try:
                        name_rcp = str(self.name_reception_sp_perf.text())
                        ant_size = float(self.ant_size_reception_sp_perf.text())
                        ant_eff = float(self.ant_eff_reception_sp_perf.text())
                        lnb_gain = float(self.lnb_gain_reception_sp_perf.text())
                        lnb_temp = float(self.lnb_temp_reception_sp_perf.text())
                        coupling_loss = float(self.coupling_loss_reception_sp_perf.text())
                        cable_loss = float(self.cable_loss_reception_sp_perf.text())
                        max_depoint = float(self.max_depoint_reception_sp_perf.text())
                        pol = str(self.pol_reception_sp_perf.currentText())
                    except:
                        QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                        return

                    with open(folder, 'wb') as f:
                        pickle.dump(
                            [name_rcp, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss, cable_loss, max_depoint, pol], f)
                        f.close()

                if os.path.exists('temp\\save.pkl'):
                    os.remove('temp\\save.pkl')

            elif opt == 'load':
                if folder != '':
                    with open(folder, 'rb') as f:
                        name_rcp, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss, cable_loss, max_depoint, pol = pickle.load(
                            f)
                        f.close()
                    self.name_reception_sp_perf.setText(str(name_rcp))
                    self.ant_size_reception_sp_perf.setText(str(ant_size))
                    self.ant_eff_reception_sp_perf.setText(str(ant_eff))
                    self.lnb_gain_reception_sp_perf.setText(str(lnb_gain))
                    self.lnb_temp_reception_sp_perf.setText(str(lnb_temp))
                    self.coupling_loss_reception_sp_perf.setText(str(coupling_loss))
                    self.cable_loss_reception_sp_perf.setText(str(cable_loss))
                    self.max_depoint_reception_sp_perf.setText(str(max_depoint))
                    index = self.pol_reception_sp_perf.findText(str(pol), QtCore.Qt.MatchFixedString)
                    if index >= 0:
                        self.pol_reception_sp_perf.setCurrentIndex(index)

                    if os.path.exists('temp\\load.pkl'):
                        os.remove('temp\\load.pkl')

            elif opt == 'clear':
                self.name_reception_sp_perf.clear()
                self.ant_size_reception_sp_perf.clear()
                self.ant_eff_reception_sp_perf.clear()
                self.lnb_gain_reception_sp_perf.clear()
                self.lnb_temp_reception_sp_perf.clear()
                self.coupling_loss_reception_sp_perf.clear()
                self.cable_loss_reception_sp_perf.clear()
                self.max_depoint_reception_sp_perf.clear()
                self.pol_reception_sp_perf.setCurrentIndex(0)

    def load_save_multi_point_perf(self, opt, item):
        import pickle
        import os
        from file_dialog import open_dialog

        if item == 'sat':
            type = 'Sat Files (*.sat)'
            if opt != 'clear':
                open_dialog(opt, type)
            try:
                with open('temp\\' + opt + '.pkl', 'rb') as f:
                    folder = pickle.load(f)
                    # print(folder)
                    f.close()
            except:
                folder = ''
            if opt == 'save':
                if folder != '':
                    folder = folder + '.sat'
                    try:
                        name_sat = str(self.name_sat_mp_perf.text())
                        long_sat = float(self.long_sat_mp_perf.text())
                        height_sat = float(self.height_sat_mp_perf.text())
                        freq = float(self.freq_sat_mp_perf.text())
                        eirp_sat = float(self.eirp_sat_mp_perf.text())
                        max_bw_sat = float(self.max_bw_sat_mp_perf.text())
                        bw_util = float(self.bw_util_sat_mp_perf.text())
                        rolloff_sat = float(self.rolloff_sat_mp_perf.text())
                        modulation = str(self.modcod_sat_mp_perf.currentText())
                        pol = str(self.pol_sat_mp_perf.currentText())

                    except:
                        QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                        return

                    with open(folder, 'wb') as f:
                        pickle.dump([name_sat, long_sat, height_sat, freq, eirp_sat,
                                     max_bw_sat, bw_util, rolloff_sat, modulation, pol], f)
                        f.close()

                if os.path.exists('temp\\save.pkl'):
                    os.remove('temp\\save.pkl')

            elif opt == 'load':
                if folder != '':
                    with open(folder, 'rb') as f:
                        name_sat, long_sat, height_sat, freq, eirp_sat, max_bw_sat, bw_util, rolloff_sat, modulation, pol = pickle.load(
                            f)
                        f.close()
                    self.name_sat_mp_perf.setText(str(name_sat))
                    self.long_sat_mp_perf.setText(str(long_sat))
                    self.height_sat_mp_perf.setText(str(height_sat))
                    self.freq_sat_mp_perf.setText(str(freq))
                    self.eirp_sat_mp_perf.setText(str(eirp_sat))
                    self.max_bw_sat_mp_perf.setText(str(max_bw_sat))
                    self.bw_util_sat_mp_perf.setText(str(bw_util))
                    self.rolloff_sat_mp_perf.setText(str(rolloff_sat))
                    index = self.pol_sat_mp_perf.findText(str(pol), QtCore.Qt.MatchFixedString)
                    if index >= 0:
                        self.pol_sat_mp_perf.setCurrentIndex(index)
                    index = self.modcod_sat_mp_perf.findText(str(modulation), QtCore.Qt.MatchFixedString)
                    if index >= 0:
                        self.modcod_sat_mp_perf.setCurrentIndex(index)

                if os.path.exists('temp\\load.pkl'):
                    os.remove('temp\\load.pkl')

            elif opt == 'clear':
                self.name_sat_mp_perf.clear()
                self.long_sat_mp_perf.clear()
                self.height_sat_mp_perf.clear()
                self.freq_sat_mp_perf.clear()
                self.eirp_sat_mp_perf.clear()
                self.max_bw_sat_mp_perf.clear()
                self.bw_util_sat_mp_perf.clear()
                self.rolloff_sat_mp_perf.clear()
                self.pol_sat_mp_perf.setCurrentIndex(0)
                self.modcod_sat_mp_perf.setCurrentIndex(0)

        elif item == 'rcp':
            type = 'Reception Setup Files (*.rcp)'
            if opt != 'clear':
                open_dialog(opt, type)
            try:
                with open('temp\\' + opt + '.pkl', 'rb') as f:
                    folder = pickle.load(f)
                    # print(folder)
                    f.close()
            except:
                folder = ''
            if opt == 'save':
                if folder != '':
                    folder = folder + '.rcp'
                    try:
                        name_rcp = str(self.name_reception_mp_perf.text())
                        ant_size = float(self.ant_size_reception_mp_perf.text())
                        ant_eff = float(self.ant_eff_reception_mp_perf.text())
                        lnb_gain = float(self.lnb_gain_reception_mp_perf.text())
                        lnb_temp = float(self.lnb_temp_reception_mp_perf.text())
                        coupling_loss = float(self.coupling_loss_reception_mp_perf.text())
                        cable_loss = float(self.cable_loss_reception_mp_perf.text())
                        max_depoint = float(self.max_depoint_reception_mp_perf.text())
                        pol = str(self.pol_reception_mp_perf.currentText())
                    except:
                        QtWidgets.QMessageBox.warning(MainWindow, 'WARNING', 'Empty or wrong type in the fields!!!')
                        return

                    with open(folder, 'wb') as f:
                        pickle.dump(
                            [name_rcp, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss, cable_loss, max_depoint,
                             pol], f)
                        f.close()

                if os.path.exists('temp\\save.pkl'):
                    os.remove('temp\\save.pkl')

            elif opt == 'load':
                if folder != '':
                    with open(folder, 'rb') as f:
                        name_rcp, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss, cable_loss, max_depoint, pol = pickle.load(
                            f)
                        f.close()
                    self.name_reception_mp_perf.setText(str(name_rcp))
                    self.ant_size_reception_mp_perf.setText(str(ant_size))
                    self.ant_eff_reception_mp_perf.setText(str(ant_eff))
                    self.lnb_gain_reception_mp_perf.setText(str(lnb_gain))
                    self.lnb_temp_reception_mp_perf.setText(str(lnb_temp))
                    self.coupling_loss_reception_mp_perf.setText(str(coupling_loss))
                    self.cable_loss_reception_mp_perf.setText(str(cable_loss))
                    self.max_depoint_reception_mp_perf.setText(str(max_depoint))
                    index = self.pol_reception_mp_perf.findText(str(pol), QtCore.Qt.MatchFixedString)
                    if index >= 0:
                        self.pol_reception_mp_perf.setCurrentIndex(index)

                if os.path.exists('temp\\load.pkl'):
                    os.remove('temp\\load.pkl')

            elif opt == 'clear':
                self.name_reception_mp_perf.clear()
                self.ant_size_reception_mp_perf.clear()
                self.ant_eff_reception_mp_perf.clear()
                self.lnb_gain_reception_mp_perf.clear()
                self.lnb_temp_reception_mp_perf.clear()
                self.coupling_loss_reception_mp_perf.clear()
                self.cable_loss_reception_mp_perf.clear()
                self.max_depoint_reception_mp_perf.clear()
                self.pol_reception_mp_perf.setCurrentIndex(0)

    def load_point_list(self):
        from file_dialog import open_dialog
        import pandas as pd
        import pickle

        opt = 'load'
        type = 'Comma-separated values (*.csv)'
        open_dialog(opt, type)

        try:
            with open('temp\\' + opt + '.pkl', 'rb') as f:
                folder = pickle.load(f)
                # print(folder)
                f.close()
        except:
            folder = ''

        self.preview_mp_perf.setColumnCount(4)
        self.preview_mp_perf.setRowCount(10)

        self.preview_mp_perf.setHorizontalHeaderLabels(['Name', 'Lat', 'Long', 'Delta Footprint'])

        if folder != '':
            self.path_mp_perf.setText(str(folder))
            data = pd.read_csv(folder, sep = ';')
            for index, row in data.iterrows():

                self.preview_mp_perf.setItem(index, 0, QtWidgets.QTableWidgetItem(str(row['Name'])))
                self.preview_mp_perf.setItem(index, 1, QtWidgets.QTableWidgetItem(str(row['Lat'])))
                self.preview_mp_perf.setItem(index, 2, QtWidgets.QTableWidgetItem(str(row['Long'])))
                self.preview_mp_perf.setItem(index, 3, QtWidgets.QTableWidgetItem(str(row['Delta Footprint'])))
                if index == 9:
                    break

            self.preview_mp_perf.setAlternatingRowColors(True)
            self.preview_mp_perf.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)

            self.preview_mp_perf.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)
            self.preview_mp_perf.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)



        if os.path.exists('temp\\load.pkl'):
            os.remove('temp\\load.pkl')

        return

    def on_combobox_changed(self, x):
        if x == 1:
            modcod = str(self.modcod_sat.currentText())
        elif x == 2:
            modcod = str(self.modcod_sat_sp_perf.currentText())
        elif x == 3:
            modcod = str(self.modcod_sat_mp_perf.currentText())


    def update_label(self, index):
        import os

        if os.path.exists('temp\\out.txt'):
            with open("temp\\out.txt", "r") as myfile:
                # data = myfile.read()

                if index == 1:
                    data = myfile.read()
                    if len(data) == 0:
                        data = ' '
                    self.textEdit_2.setText(data)

                if index == 2:
                    data = myfile.read()
                    if len(data) == 0:
                        data = ' '
                    self.output_sp_perf.setText(data)

                if index == 3:
                    data = myfile.readlines()
                    if len(data) != 0:
                        del data[:-1]
                    else:
                        data = ' '
                    self.output_sp_perf_2.setText(data[0])
                    # self.output_sp_perf_2.moveCursor(QtGui.QTextCursor.End)
        else:
            return

    def change_page(self, x):
        self.stackedWidget.setCurrentIndex(x)

    def single_point_atm_atnn_calc(self):
        from atm_atnn import calc_atm_atnn

        try:
            p = float(self.p_year_spatm.text())
            site_lat = float(self.lat_ground_station_spatm.text())
            site_long = float(self.long_ground_station_spatm.text())
            ant_size = float(self.ant_size_reception_spatm.text())
            ant_eff = float(self.ant_eff_reception_spatm.text())
            sat_long = float(self.long_sat_spatm.text())
            freq = float(self.freq_sat_spatm.text())
            method = str(self.method_spatm.currentText())

            import pickle

            with open('temp\\args.pkl', 'wb') as f:
                pickle.dump([p, site_lat, site_long, ant_size, ant_eff, sat_long, freq, method], f)
                f.close()
            self.threadpool = QtCore.QThreadPool()
            self.threadpool.start(calc_atm_atnn)
            self.threadpool.waitForDone()
            self.update_label(1)
            return


        except:
            self.textEdit_2.setText('Please fill all the fields before running!!!')

    def single_point_calc_perf(self):
        from link_performance import sp_link_performance
        import pickle
        try:
            # ground station parameters
            site_lat = float(self.lat_ground_station_sp_perf.text())
            site_long = float(self.long_ground_station_sp_perf.text())

            # #satellite parameters
            sat_long = float(self.long_sat_sp_perf.text())
            freq = float(self.freq_sat_sp_perf.text())
            sat_height = float(self.height_sat_sp_perf.text())
            max_eirp = float(self.eirp_sat_sp_perf.text())
            max_bw = float(self.max_bw_sat_sp_perf.text())
            bw_util = float(self.bw_util_sat_sp_perf.text())
            roll_off = float(self.rolloff_sat_sp_perf.text())
            modcod = str(self.modcod_sat_sp_perf.currentText())
            pol = str(self.pol_sat_sp_perf.currentText())

            # #reception parameters

            ant_size = float(self.ant_size_reception_sp_perf.text())
            ant_eff = float(self.ant_eff_reception_sp_perf.text())
            lnb_gain = float(self.lnb_gain_reception_sp_perf.text())
            lnb_temp = float(self.lnb_temp_reception_sp_perf.text())
            coupling_loss = float(self.coupling_loss_reception_sp_perf.text())
            cable_loss = float(self.cable_loss_reception_sp_perf.text())
            max_depoint = float(self.max_depoint_reception_sp_perf.text())

            # #calculation parameters
            snr_relaxation = float(self.relaxation_sp_perf.text())
            margin = float(self.margin_sp_perf.text())

            with open('temp\\args.pkl', 'wb') as f:
                pickle.dump(
                    [site_lat, site_long, sat_long, freq, max_eirp, sat_height, max_bw, bw_util,
                     modcod, pol, roll_off, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss,
                     cable_loss, max_depoint, snr_relaxation, margin], f)
                f.close()
        except:
            self.output_sp_perf.setText('Please fill all the fields before running!!!')
            return

        self.output_sp_perf.setText('Starting ....')

        self.threadpool = QtCore.QThreadPool()
        self.threadpool.start(sp_link_performance)
        self.threadpool.waitForDone()
        self.update_label(2)
        return

    def multi_point_calc_perf(self):
        from link_performance import mp_link_performance
        import pickle
        try:

            #ground station points path
            gr_station_path = str(self.path_mp_perf.text())

            # #satellite parameters
            sat_long = float(self.long_sat_mp_perf.text())
            freq = float(self.freq_sat_mp_perf.text())
            sat_height = float(self.height_sat_mp_perf.text())
            max_eirp = float(self.eirp_sat_mp_perf.text())
            max_bw = float(self.max_bw_sat_mp_perf.text())
            bw_util = float(self.bw_util_sat_mp_perf.text())
            roll_off = float(self.rolloff_sat_mp_perf.text())
            modcod = str(self.modcod_sat_mp_perf.currentText())
            pol = str(self.pol_sat_mp_perf.currentText())

            # #reception parameters

            ant_size = float(self.ant_size_reception_mp_perf.text())
            ant_eff = float(self.ant_eff_reception_mp_perf.text())
            lnb_gain = float(self.lnb_gain_reception_mp_perf.text())
            lnb_temp = float(self.lnb_temp_reception_mp_perf.text())
            coupling_loss = float(self.coupling_loss_reception_mp_perf.text())
            cable_loss = float(self.cable_loss_reception_mp_perf.text())
            max_depoint = float(self.max_depoint_reception_mp_perf.text())

            # #calculation parameters
            # snr_relaxation = float(self.relaxation_mp_perf.text())
            snr_relaxation = float(self.relaxation_mp_perf.text())
            margin = float(self.margin_mp_perf.text())
            threads = int(self.n_threads.currentText())

            with open('temp\\args.pkl', 'wb') as f:
                pickle.dump(
                    [gr_station_path, sat_long, freq, max_eirp, sat_height, max_bw, bw_util,
                     modcod, pol, roll_off, ant_size, ant_eff, lnb_gain, lnb_temp, coupling_loss,
                     cable_loss, max_depoint, snr_relaxation, margin, threads], f)
                f.close()
        except:
            self.output_sp_perf.setText('Please fill all the fields before running!!!')
            return

        self.threadpool = QtCore.QThreadPool()
        self.threadpool.start(mp_link_performance)


        # self.threadtimer = QtCore.QTimer()
        # self.threadtimer.timeout.connect(lambda x=self.threadpool.activeThreadCount(): self.kill_threadpoll(x))
        # self.threadtimer.start(3000)  # milliseconds

        # while self.threadpool.activeThreadCount() != 0:
        #     print(self.threadpool.activeThreadCount())
        #self.threadpool.waitForDone()
        # self._update_timer.stop()
        return

    # ======================================================================================================================
    # ======================================================================================================================

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SatLink"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Satellite"))
        self.label_31.setText(_translate("MainWindow", "Name"))
        self.label_54.setText(_translate("MainWindow", "Longitude (degrees)"))
        self.save_sat.setText(_translate("MainWindow", "Save"))
        self.load_sat.setText(_translate("MainWindow", "Load"))
        self.default_sat.setItemText(1, _translate("MainWindow", "StarOne C2/C4"))
        self.default_sat.setItemText(2, _translate("MainWindow", "Hispamar"))
        self.default_sat.setItemText(3, _translate("MainWindow", "Claro"))
        self.default_sat.setItemText(4, _translate("MainWindow", "Menino Ney"))
        self.label_55.setText(_translate("MainWindow", "Default Satellites"))
        self.label_56.setText(_translate("MainWindow", "Altitude (km)"))
        self.label_59.setText(_translate("MainWindow", "E.I.R.P. (dBW)"))
        self.label_60.setText(_translate("MainWindow", "Transpoder\'s max.\n"
"bandwidith (MHz)"))
        self.label_61.setText(_translate("MainWindow", "Effective \n"
"bandwidith (MHz)"))
        self.label_64.setText(_translate("MainWindow", "Roll-off"))
        self.label_65.setText(_translate("MainWindow", "Modulation"))
        self.modcod_sat.setItemText(0, _translate("MainWindow", "QPSK 2/3"))
        self.modcod_sat.setItemText(1, _translate("MainWindow", "8PSK 30/33"))
        self.modcod_sat.setItemText(2, _translate("MainWindow", "64 QAM"))
        self.label_66.setText(_translate("MainWindow", "Frequency (GHz)"))
        self.label_7.setText(_translate("MainWindow", "Polarization"))
        self.pol_sat.setItemText(0, _translate("MainWindow", "horizontal"))
        self.pol_sat.setItemText(1, _translate("MainWindow", "vertical"))
        self.pol_sat.setItemText(2, _translate("MainWindow", "circular"))
        self.clear_sat.setText(_translate("MainWindow", "Clear"))
        self.groupBox.setTitle(_translate("MainWindow", "Ground Station"))
        self.label.setText(_translate("MainWindow", "Name"))
        self.label_2.setText(_translate("MainWindow", "Latitude (degrees)"))
        self.label_3.setText(_translate("MainWindow", "Longitude (degrees)"))
        self.save_ground_station_gdstation.setText(_translate("MainWindow", "Save"))
        self.load_ground_station_gdstation.setText(_translate("MainWindow", "Load"))
        self.clear_ground_station_gdstation.setText(_translate("MainWindow", "Clear"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Reception Characteristics"))
        self.label_19.setText(_translate("MainWindow", "Name:"))
        self.label_20.setText(_translate("MainWindow", "Antenna size (m)"))
        self.label_21.setText(_translate("MainWindow", "LNB gain (dB)"))
        self.save_reception_rcp.setText(_translate("MainWindow", "Save"))
        self.load_reception_rcp.setText(_translate("MainWindow", "Load"))
        self.label_23.setText(_translate("MainWindow", "Antenna efficiency (%)"))
        self.label_24.setText(_translate("MainWindow", "LNB noise temp. (K)"))
        self.label_25.setText(_translate("MainWindow", "Coupling loss (dB)"))
        self.label_26.setText(_translate("MainWindow", "Maximum \n"
"depointing (degrees)"))
        self.label_8.setText(_translate("MainWindow", "Polarization"))
        self.pol_reception_rcp.setItemText(0, _translate("MainWindow", "horizontal"))
        self.pol_reception_rcp.setItemText(1, _translate("MainWindow", "vertical"))
        self.pol_reception_rcp.setItemText(2, _translate("MainWindow", "circular"))
        self.clear_reception_rcp.setText(_translate("MainWindow", "Clear"))
        self.label_62.setText(_translate("MainWindow", "Cable loss (dB)"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Reception"))
        self.label_51.setText(_translate("MainWindow", "Latitude (degrees)"))
        self.label_50.setText(_translate("MainWindow", "Longitude (degrees)"))
        self.label_53.setText(_translate("MainWindow", "Antenna size (m)"))
        self.label_68.setText(_translate("MainWindow", "Antenna efficiency"))
        self.calc_spatm.setText(_translate("MainWindow", "Calculate"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Satellite"))
        self.label_52.setText(_translate("MainWindow", "Frequency (GHz)"))
        self.label_57.setText(_translate("MainWindow", "Longitude (degrees)"))
        self.default_sat_sp_perf_3.setItemText(0, _translate("MainWindow", "StarOne C2/C4"))
        self.default_sat_sp_perf_3.setItemText(1, _translate("MainWindow", "Hispamar"))
        self.default_sat_sp_perf_3.setItemText(2, _translate("MainWindow", "Claro"))
        self.default_sat_sp_perf_3.setItemText(3, _translate("MainWindow", "Menino Ney"))
        self.label_63.setText(_translate("MainWindow", "Default Satellites"))
        self.p_year_spatm.setStatusTip(_translate("MainWindow", "Values between 0.001 and 0.5"))
        self.p_year_spatm.setText(_translate("MainWindow", "0.001"))
        self.label_58.setText(_translate("MainWindow", "Excess % of time per year"))
        self.label_9.setText(_translate("MainWindow", "Method"))
        self.method_spatm.setStatusTip(_translate("MainWindow", "Mode calculation for gaseous attenuation"))
        self.method_spatm.setItemText(0, _translate("MainWindow", "approx"))
        self.method_spatm.setItemText(1, _translate("MainWindow", "exact"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Ground Station"))
        self.label_27.setText(_translate("MainWindow", "Name"))
        self.label_28.setText(_translate("MainWindow", "Latitude (degrees)"))
        self.label_29.setText(_translate("MainWindow", "Longitude (degrees)"))
        self.save_ground_station_sp_perf.setText(_translate("MainWindow", "Save"))
        self.load_ground_station_sp_perf.setText(_translate("MainWindow", "Load"))
        self.clear_ground_station_sp_perf.setText(_translate("MainWindow", "Clear"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Satellite"))
        self.label_30.setText(_translate("MainWindow", "Name"))
        self.label_32.setText(_translate("MainWindow", "Longitude (degrees)"))
        self.save_sat_sp_perf.setText(_translate("MainWindow", "Save"))
        self.load_sat_sp_perf.setText(_translate("MainWindow", "Load"))
        self.default_sat_sp_perf.setItemText(0, _translate("MainWindow", "StarOne C2/C4"))
        self.default_sat_sp_perf.setItemText(1, _translate("MainWindow", "Hispamar"))
        self.default_sat_sp_perf.setItemText(2, _translate("MainWindow", "Claro"))
        self.default_sat_sp_perf.setItemText(3, _translate("MainWindow", "Menino Ney"))
        self.label_33.setText(_translate("MainWindow", "Default Satellites"))
        self.label_34.setText(_translate("MainWindow", "Altitude (km)"))
        self.label_35.setText(_translate("MainWindow", "E.I.R.P. (dBW)"))
        self.label_36.setText(_translate("MainWindow", "Transpoder\'s max.\n"
"bandwidith (MHz)"))
        self.label_37.setText(_translate("MainWindow", "Effective \n"
"bandwidith (MHz)"))
        self.label_40.setText(_translate("MainWindow", "Roll-off"))
        self.label_41.setText(_translate("MainWindow", "Modulation"))
        self.modcod_sat_sp_perf.setItemText(0, _translate("MainWindow", "QPSK 2/3"))
        self.modcod_sat_sp_perf.setItemText(1, _translate("MainWindow", "8PSK 30/33"))
        self.modcod_sat_sp_perf.setItemText(2, _translate("MainWindow", "64 QAM"))
        self.label_42.setText(_translate("MainWindow", "Frequency (GHz)"))
        self.label_6.setText(_translate("MainWindow", "Polarization"))
        self.pol_sat_sp_perf.setItemText(0, _translate("MainWindow", "horizontal"))
        self.pol_sat_sp_perf.setItemText(1, _translate("MainWindow", "vertical"))
        self.pol_sat_sp_perf.setItemText(2, _translate("MainWindow", "circular"))
        self.clear_sat_sp_perf.setText(_translate("MainWindow", "Clear"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Reception Characteristics"))
        self.label_43.setText(_translate("MainWindow", "Name:"))
        self.label_44.setText(_translate("MainWindow", "Antenna size (m)"))
        self.label_45.setText(_translate("MainWindow", "LNB gain (dB)"))
        self.save_reception_sp_perf.setText(_translate("MainWindow", "Save"))
        self.load_reception_sp_perf.setText(_translate("MainWindow", "Load"))
        self.label_46.setText(_translate("MainWindow", "Antenna efficiency"))
        self.label_47.setText(_translate("MainWindow", "LNB noise temp. (K)"))
        self.label_48.setText(_translate("MainWindow", "Coupling loss (dB)"))
        self.label_49.setText(_translate("MainWindow", "Maximum \n"
"depointing (degrees)"))
        self.label_5.setText(_translate("MainWindow", "Polarization"))
        self.pol_reception_sp_perf.setItemText(0, _translate("MainWindow", "horizontal"))
        self.pol_reception_sp_perf.setItemText(1, _translate("MainWindow", "vertical"))
        self.pol_reception_sp_perf.setItemText(2, _translate("MainWindow", "circular"))
        self.clear_reception_sp_perf.setText(_translate("MainWindow", "Clear"))
        self.label_67.setText(_translate("MainWindow", "Cable loss (dB)"))
        self.calc_sp_perf.setText(_translate("MainWindow", "Calculate"))
        self.label_4.setText(_translate("MainWindow", "SNR goal relaxation (dB)"))
        self.relaxation_sp_perf.setStatusTip(_translate("MainWindow", "Goal (+ -) margin to achieve the required SNR"))
        self.relaxation_sp_perf.setText(_translate("MainWindow", "0.1"))
        self.margin_sp_perf.setStatusTip(_translate("MainWindow", "Goal (+ -) margin to achieve the required SNR"))
        self.margin_sp_perf.setText(_translate("MainWindow", "0"))
        self.label_173.setText(_translate("MainWindow", "Margin (dB)"))
        self.browse_path_mp_perf.setStatusTip(_translate("MainWindow", "Browse list"))
        self.browse_path_mp_perf.setText(_translate("MainWindow", "Browse"))
        self.label_10.setText(_translate("MainWindow", "Path"))
        self.label_11.setText(_translate("MainWindow", "List Preview"))
        self.groupBox_10.setTitle(_translate("MainWindow", "Satellite"))
        self.label_71.setText(_translate("MainWindow", "Name"))
        self.label_72.setText(_translate("MainWindow", "Longitude (degrees)"))
        self.save_sat_mp_perf.setText(_translate("MainWindow", "Save"))
        self.load_sat_mp_perf.setText(_translate("MainWindow", "Load"))
        self.default_sat_mp_perf.setItemText(0, _translate("MainWindow", "StarOne C2/C4"))
        self.default_sat_mp_perf.setItemText(1, _translate("MainWindow", "Hispamar"))
        self.default_sat_mp_perf.setItemText(2, _translate("MainWindow", "Claro"))
        self.default_sat_mp_perf.setItemText(3, _translate("MainWindow", "Menino Ney"))
        self.label_73.setText(_translate("MainWindow", "Default Satellites"))
        self.label_74.setText(_translate("MainWindow", "Altitude (km)"))
        self.label_75.setText(_translate("MainWindow", "E.I.R.P. (dBW)"))
        self.label_76.setText(_translate("MainWindow", "Transpoder\'s max.\n"
"bandwidith (MHz)"))
        self.label_77.setText(_translate("MainWindow", "Effective \n"
"bandwidith (MHz)"))
        self.label_80.setText(_translate("MainWindow", "Roll-off"))
        self.label_81.setText(_translate("MainWindow", "Modulation"))
        self.modcod_sat_mp_perf.setItemText(0, _translate("MainWindow", "QPSK 2/3"))
        self.modcod_sat_mp_perf.setItemText(1, _translate("MainWindow", "8PSK 30/33"))
        self.modcod_sat_mp_perf.setItemText(2, _translate("MainWindow", "64 QAM"))
        self.label_82.setText(_translate("MainWindow", "Frequency (GHz)"))
        self.label_12.setText(_translate("MainWindow", "Polarization"))
        self.pol_sat_mp_perf.setItemText(0, _translate("MainWindow", "horizontal"))
        self.pol_sat_mp_perf.setItemText(1, _translate("MainWindow", "vertical"))
        self.pol_sat_mp_perf.setItemText(2, _translate("MainWindow", "circular"))
        self.clear_satellite_mp_perf.setText(_translate("MainWindow", "Clear"))
        self.groupBox_11.setTitle(_translate("MainWindow", "Reception Characteristics"))
        self.label_83.setText(_translate("MainWindow", "Name:"))
        self.label_84.setText(_translate("MainWindow", "Antenna size (m)"))
        self.label_85.setText(_translate("MainWindow", "LNB gain (dB)"))
        self.save_reception_mp_perf.setText(_translate("MainWindow", "Save"))
        self.load_reception_mp_perf.setText(_translate("MainWindow", "Load"))
        self.label_86.setText(_translate("MainWindow", "Antenna efficiency"))
        self.label_87.setText(_translate("MainWindow", "LNB noise temp. (K)"))
        self.label_88.setText(_translate("MainWindow", "Coupling loss (dB)"))
        self.label_89.setText(_translate("MainWindow", "Maximum \n"
"depointing (degrees)"))
        self.label_13.setText(_translate("MainWindow", "Polarization"))
        self.pol_reception_mp_perf.setItemText(0, _translate("MainWindow", "horizontal"))
        self.pol_reception_mp_perf.setItemText(1, _translate("MainWindow", "vertical"))
        self.pol_reception_mp_perf.setItemText(2, _translate("MainWindow", "circular"))
        self.clear_reception_mp_perf.setText(_translate("MainWindow", "Clear"))
        self.label_90.setText(_translate("MainWindow", "Cable loss (dB)"))
        self.relaxation_mp_perf.setStatusTip(_translate("MainWindow", "Goal (+ -) margin to achieve the required SNR"))
        self.relaxation_mp_perf.setText(_translate("MainWindow", "0.1"))
        self.calc_mp_perf.setText(_translate("MainWindow", "Calculate"))
        self.label_14.setText(_translate("MainWindow", "SNR goal relaxation (dB)"))
        self.label_15.setText(_translate("MainWindow", "Threads"))
        self.n_threads.setStatusTip(_translate("MainWindow", "Thread number used in calcullations"))
        self.label_16.setText(_translate("MainWindow", "Margin (dB)"))
        self.margin_mp_perf.setStatusTip(_translate("MainWindow", "Effective link budget margin"))
        self.margin_mp_perf.setText(_translate("MainWindow", "0"))
        self.menuNew.setTitle(_translate("MainWindow", "File"))
        self.menuCalculation.setTitle(_translate("MainWindow", "Single Point Calculation"))
        self.menuList_Calculation.setTitle(_translate("MainWindow", "List Calculation"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.action_New_Satellite.setText(_translate("MainWindow", "Satellite"))
        self.action_New_Satellite.setStatusTip(_translate("MainWindow", "Define and save a new satellite to use in calculations"))
        self.actionReception.setText(_translate("MainWindow", "Reception"))
        self.actionReception.setStatusTip(_translate("MainWindow", "Define and save new reception characteristics to use in calculations"))
        self.action_New_Ground_Station.setText(_translate("MainWindow", "Ground Station"))
        self.action_New_Ground_Station.setStatusTip(_translate("MainWindow", "Define and save a new ground station to use in calculations"))
        self.action_Single_Atmospheric_Atenuation.setText(_translate("MainWindow", "Atmospheric Atenuation"))
        self.action_Single_Atmospheric_Atenuation.setStatusTip(_translate("MainWindow", "Complete single point atmospheric attenuation calculation"))
        self.action_Single_Downlink_Performance.setText(_translate("MainWindow", "Downlink Performance"))
        self.action_Single_Downlink_Performance.setStatusTip(_translate("MainWindow", "Complete single point downlink performance calculation"))
        self.actionDownlink_Performance.setText(_translate("MainWindow", "Downlink Performance"))
        self.actionDownlink_Performance.setStatusTip(_translate("MainWindow", "Complete multi point (list) downlink performance calculation"))


class WorkerSignals(QtCore.QObject):
    progress = QtCore.pyqtSignal(int)


class JobRunner(QtCore.QRunnable):
    signals = WorkerSignals()

    def __init__(self):
        super().__init__()

        self.is_paused = False
        self.is_killed = False

    @QtCore.pyqtSlot()
    def run(self):
        import time
        for n in range(100):
            self.signals.progress.emit(n + 1)
            time.sleep(0.1)

            while self.is_paused:
                time.sleep(0)

            if self.is_killed:
                break

    def pause(self):
        self.is_paused = True

    def resume(self):
        self.is_paused = False

    def kill(self):
        self.is_killed = True

if __name__ == "__main__":
    import sys, os
    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = '1'
    if hasattr(QtCore.Qt, 'AA_EnableHighDpiScaling'):
        QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True) # enable highdpi scaling
    if hasattr(QtCore.Qt, 'AA_UseHighDpiPixmaps'):
        QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True) # use highdpi icons
    app = QtWidgets.QApplication(sys.argv)
    # QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)  # enable highdpi scaling
    # QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)  # use highdpi icons
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    thread = QtCore.QThread(MainWindow.show())
    thread.start()
    sys.exit(app.exec_())
